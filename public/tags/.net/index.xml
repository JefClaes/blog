<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.NET on Jef Claes</title>
    <link>http://localhost:1313/tags/.net/</link>
    <description>Recent content in .NET on Jef Claes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 May 2013 16:27:00 +0200</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>It&#39;s not cake we are baking</title>
      <link>http://localhost:1313/2012/12/its-not-cake-we-are-baking/</link>
      <pubDate>Sun, 09 Dec 2012 16:08:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2012/12/its-not-cake-we-are-baking/</guid>
      <description>I recently watched a talk on Vimeo where Christin Gorman talks about how cookie dough relates to Hibernate; why use the generic, bloated and one-fits-all solution when you can mix together your own yummy cookie dough? We should aspire to be the Gordon Ramsey of software, not the college student who can only cook Ramen noodles. If you haven&amp;rsquo;t watched or listened to her talk, you should; it&amp;rsquo;s only a few minutes long, and she brings it really well.</description>
    </item>
    
    <item>
      <title>Some notes on performance tuning with NHibernate</title>
      <link>http://localhost:1313/2012/12/some-notes-on-performance-tuning-with-nhibernate/</link>
      <pubDate>Sun, 02 Dec 2012 17:36:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2012/12/some-notes-on-performance-tuning-with-nhibernate/</guid>
      <description>A few weeks back, I spent an intensive day performance tuning parts of a, to me, relatively unfamiliar part of our codebase. Like it often is, the biggest optimizations were to be found in how we work with the database. Now, I don&amp;rsquo;t consider myself to be an NHibernate expert; I read this book and have used it on two projects, but in the end I just do my best to avoid doing stupid things with it.</description>
    </item>
    
    <item>
      <title>Released: Kill long meetings</title>
      <link>http://localhost:1313/2012/11/released-kill-long-meetings/</link>
      <pubDate>Sun, 25 Nov 2012 17:45:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2012/11/released-kill-long-meetings/</guid>
      <description>A lot has already been said and written about meetings, and some have carried the message above par; &amp;lsquo;Meetings: where work goes to die&#39;. Today, I&amp;rsquo;m not going to foul the internet with another rant, but I&amp;rsquo;d like to show you a small application built over the last few weeks after work.
I regularly find myself building small things as an antitoxin to the regular periods of not writing and shipping code at work.</description>
    </item>
    
    <item>
      <title>Post Web.NET Europe</title>
      <link>http://localhost:1313/2012/10/post-web.net-europe/</link>
      <pubDate>Mon, 22 Oct 2012 20:35:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/10/post-web.net-europe/</guid>
      <description>I attended and spoke at Web.NET Europe in Milan over the weekend. This was only my fourth full day- or more conference (Techdays Belgium, TechEd Berlin and HTML5 WebCamps), but it was undoubtedly the best one so far.
The quality of the sessions was definitely not inferior to those of bigger conferences. I especially enjoyed the talks on SignalR, OAuth and scaling data (I included some of my notes below). The strength of this conference doesn&amp;rsquo;t lie in the exceptional speakers or sessions though, but in its cozy size and the type of attendees it attracts.</description>
    </item>
    
    <item>
      <title>Slides and code from my Web.NET Europe REST and ASP.NET Web API session</title>
      <link>http://localhost:1313/2012/10/slides-and-code-from-my-web.net-europe-rest-and-asp.net-web-api-session/</link>
      <pubDate>Sun, 21 Oct 2012 00:16:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/10/slides-and-code-from-my-web.net-europe-rest-and-asp.net-web-api-session/</guid>
      <description>I just returned to the hotel after attending and speaking at Web.NET Europe 2012. There were multiple sessions on ASP.NET Web API today, and I was responsible for delivering the first one of the day. Being first, and to avoid overlap with others, I tried to lay a solid foundation by focusing on the REST and ASP.NET Web API basics: resources, identifiers, representations, verbs and hypermedia.
More people than I expected showed up for my talk; somewhere around 50 to 70 attendees, I guess.</description>
    </item>
    
    <item>
      <title>Commands with dependencies</title>
      <link>http://localhost:1313/2012/10/commands-with-dependencies/</link>
      <pubDate>Mon, 15 Oct 2012 16:57:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/10/commands-with-dependencies/</guid>
      <description>Also read: Separating command data from logic and sending it on a bus
Yesterday I wrote about an architecture which limits abstractions by solely introducing commands and queries. I shared a dead simple variation of this pattern, the advantages I experienced, and how I could still unit test the controller if I wanted to.
At the end of that post I wondered how I would be able to test commands in isolation; suppose the implementation doesn&amp;rsquo;t use a database this time, but a hairy, too low-level, third party webservice.</description>
    </item>
    
    <item>
      <title>Commands, queries and testing</title>
      <link>http://localhost:1313/2012/10/commands-queries-and-testing/</link>
      <pubDate>Sun, 14 Oct 2012 17:45:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/10/commands-queries-and-testing/</guid>
      <description>Also read:
 Self-contained commands with dependencies Separating command data from logic and sending it on a bus  We need abstraction, but the amount of abstraction we really need depends, and should be assessed on a case-by-case basis. It seems advisable to grow abstractions, and to introduce them gradually.
That being said, in this post I want to talk about an architecture that tries to limit abstractions to solely commands and queries.</description>
    </item>
    
    <item>
      <title>Finding the gaps in a sequence of dates</title>
      <link>http://localhost:1313/2012/09/finding-the-gaps-in-a-sequence-of-dates/</link>
      <pubDate>Sun, 23 Sep 2012 20:42:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/09/finding-the-gaps-in-a-sequence-of-dates/</guid>
      <description>Somewhere earlier this week I had to find the gaps in a sequence of dates. Admittedly, my first action was to search Stackoverflow for a clean solution. But since no one asked the question there yet, I had to implement it myself.
The solution comes in the form of an extension method on IEnumerable&amp;lt;DateTime&amp;gt;, which takes a lower bound and an upper bound, and returns an enumerable of dates.
public static IEnumerable&amp;lt;DateTime&amp;gt; GetGaps( this IEnumerable&amp;lt;DateTime&amp;gt; sequence, DateTime lowerbound, DateTime upperbound) { var completeSequence = new List&amp;lt;DateTime&amp;gt;(); var tmpDay = lowerbound.</description>
    </item>
    
    <item>
      <title>To intellistumble</title>
      <link>http://localhost:1313/2012/09/to-intellistumble/</link>
      <pubDate>Thu, 20 Sep 2012 12:14:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/09/to-intellistumble/</guid>
      <description>To accidentally or unexpectedly discover a method or property whilst using IntelliSense to browse through symbol names.
 We should add this term to the Microsoft developer jargon.</description>
    </item>
    
    <item>
      <title>Slides and code from my Tunisia REST and ASP.NET Web API session</title>
      <link>http://localhost:1313/2012/09/slides-and-code-from-my-tunisia-rest-and-asp.net-web-api-session/</link>
      <pubDate>Thu, 13 Sep 2012 08:55:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/09/slides-and-code-from-my-tunisia-rest-and-asp.net-web-api-session/</guid>
      <description>I just returned from a four day trip to Tunisia with Euricom. Next to indulging on the sun, food and all-inclusive cocktails, getting to know each other in a less professional setting, we spent somewhere around half of our days - and this is a rather generous estimate - doing technical sessions and workshops.I gave a 90 minute long crash course on REST and ASP.NET Web API.
Content
REST Concepts Architectural values Left overs  ASP.</description>
    </item>
    
    <item>
      <title>Is serialization really that expensive?</title>
      <link>http://localhost:1313/2012/08/is-serialization-really-that-expensive/</link>
      <pubDate>Wed, 22 Aug 2012 13:19:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/08/is-serialization-really-that-expensive/</guid>
      <description>While wading through an exotic codebase, I stumbled upon a static class named Convert. This class contained somewhere around 2700 (non-generated) lines of code, where each method manually converted some object to a simple textual representation. These methods were then used to convert requests and reponses to and from a remote third party service before logging them to the database for auditing reasons.
public static class Convert { public static string PaymentRequest(PaymentRequest req) { var sb = new StringBuilder(); sb.</description>
    </item>
    
    <item>
      <title>Making my first NancyFx test pass</title>
      <link>http://localhost:1313/2012/06/making-my-first-nancyfx-test-pass/</link>
      <pubDate>Mon, 11 Jun 2012 16:47:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/06/making-my-first-nancyfx-test-pass/</guid>
      <description>Like I already said last week, I have been dabbling a bit with NancyFx lately.
This week I took a serious look at testing Nancy modules and Razor views. Due to Nancy&amp;rsquo;s defaults and conventions, it takes a little while to set up Nancy in a test context. Then again, Nancy&amp;rsquo;s granularity makes it simple enough to set up a solid test infrastructure by replacing some of its building blocks.</description>
    </item>
    
    <item>
      <title>Painless database logging with mongoDB</title>
      <link>http://localhost:1313/2012/05/painless-database-logging-with-mongodb/</link>
      <pubDate>Sun, 20 May 2012 17:18:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/05/painless-database-logging-with-mongodb/</guid>
      <description>While browsing the source code of the ELMAH mongoDB provider, I learned about a special type of collections: capped collections.
From the mongoDB documentation:
 Capped collections are fixed sized collections that have a very high performance auto-FIFO age-out feature (age out is based on insertion order). In addition, capped collections automatically, with high performance, maintain insertion order for the documents in the collection; this is very powerful for certain use cases such as logging.</description>
    </item>
    
    <item>
      <title>Some Servicelocator pattern stinks</title>
      <link>http://localhost:1313/2012/04/some-servicelocator-pattern-stinks/</link>
      <pubDate>Tue, 17 Apr 2012 20:33:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/04/some-servicelocator-pattern-stinks/</guid>
      <description>I have been working on a somewhat legacy codebase which makes use of the Servicelocator pattern. Although I always thought of Dependecy Injection to be the superior pattern, I was pleased to find some Inversion of Control implementation in there. Working with the codebase, I discovered first hand how easily, when used without caution and discipline, the Servicelocator pattern can introduce code rot.
I will walk you through some of the issues I have with the Servicelocator pattern, mostly looking at it from a test perspective.</description>
    </item>
    
    <item>
      <title>Book review: Working with NHibernate 3.0</title>
      <link>http://localhost:1313/2012/02/book-review-working-with-nhibernate-3.0/</link>
      <pubDate>Wed, 08 Feb 2012 20:21:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2012/02/book-review-working-with-nhibernate-3.0/</guid>
      <description>It&amp;rsquo;s been a while since I wrote my last book review, mostly because I&amp;rsquo;m still trying to figure out when it adds value to write one. For this one it was pretty obvious, there are far too little reviews out there.
Being new to NHibernate, and NHibernate being known as having a steep learning curve, I thought it would be a good idea to do some reading. Searching for books on NHibernate 3.</description>
    </item>
    
    <item>
      <title>Testing DI bootstrappers</title>
      <link>http://localhost:1313/2012/02/testing-di-bootstrappers/</link>
      <pubDate>Mon, 06 Feb 2012 08:59:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2012/02/testing-di-bootstrappers/</guid>
      <description>While your Dependency Injection bootstrappers - being responsible for gluing your application together - are a vital part of your application, they are seldom put under test. I don&amp;rsquo;t see any reason why they shouldn&amp;rsquo;t be though. The cost of these tests is negligible, definitely if you compare it to the cost of the often catastrophical outcome of bugs in your bootstrappers.
I encourage you to take a look at the commit history of your DI bootstrappers; I bet they change a lot.</description>
    </item>
    
    <item>
      <title>Rewriting an if</title>
      <link>http://localhost:1313/2011/11/rewriting-an-if/</link>
      <pubDate>Thu, 24 Nov 2011 21:12:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/11/rewriting-an-if/</guid>
      <description>Yesterday I came across an if statement that looked something like this.
if (arg == &amp;quot;a&amp;quot; || arg == &amp;quot;b&amp;quot; || arg == &amp;quot;c&amp;quot; || arg == &amp;quot;d&amp;quot; || arg == &amp;quot;e&amp;quot;) { Console.WriteLine(true); }  An alternative way of writing this could look like this.
if (new [] { &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, &amp;quot;d&amp;quot;, &amp;quot;e&amp;quot; }.Contains(arg)) Console.WriteLine(true);  I can&amp;rsquo;t remember in which Github repository I spotted this technique, but I&amp;rsquo;m sure it was written in something other than C#.</description>
    </item>
    
    <item>
      <title>Book review: The Art of Unit Testing</title>
      <link>http://localhost:1313/2011/10/book-review-the-art-of-unit-testing/</link>
      <pubDate>Thu, 06 Oct 2011 21:08:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/10/book-review-the-art-of-unit-testing/</guid>
      <description>I think The Art of Unit Testing targets a broad audience. Beginners will find every part of the book useful, where intermediates might be more interested in the final two parts.
Roy Osherove starts this book by laying a solid foundation of the unit testing concept. Why is testing important? What defines a good unit test, and how does a unit test differ from an integration test? In the second part of the book, he demonstrates the use of two core unit testing techniques: stubs and mocks.</description>
    </item>
    
    <item>
      <title>Checking for anonymous types</title>
      <link>http://localhost:1313/2011/05/checking-for-anonymous-types/</link>
      <pubDate>Sat, 21 May 2011 18:00:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/05/checking-for-anonymous-types/</guid>
      <description>Because I blogged about anonymous types last month, I thought following method would also make an interesting post.
private static bool IsAnonymousType(Type type) { Debug.Assert(type != null, &amp;quot;Type should not be null&amp;quot;); // HACK: The only way to detect anonymous types right now. return Attribute.IsDefined(type, typeof(CompilerGeneratedAttribute), false) &amp;amp;&amp;amp; type.IsGenericType &amp;amp;&amp;amp; type.Name.Contains(&amp;quot;AnonymousType&amp;quot;) &amp;amp;&amp;amp; (type.Name.StartsWith(&amp;quot;&amp;lt;&amp;gt;&amp;quot;, StringComparison.OrdinalIgnoreCase) || type.Name.StartsWith(&amp;quot;VB$&amp;quot;, StringComparison.OrdinalIgnoreCase)) &amp;amp;&amp;amp; (type.Attributes &amp;amp; TypeAttributes.NotPublic) == TypeAttributes.NotPublic; }  For a type to be anonymous:</description>
    </item>
    
    <item>
      <title>Anonymous type equality follow-up: Equals()</title>
      <link>http://localhost:1313/2011/04/anonymous-type-equality-follow-up-equals/</link>
      <pubDate>Sun, 24 Apr 2011 12:30:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/04/anonymous-type-equality-follow-up-equals/</guid>
      <description>After publishing yesterday&amp;rsquo;s post on anonymous type equality, I received an interesting comment from a fellow redditor. He stated that even if the sequence of the property assignment were the same, the equality comparison would still return false, because the types generated by the C# compiler are reference types, making their references being tested for equality and not their data.
This is very true, unless the Equals() method is overridden. And this is exactly what the compiler does for us when we define anonymous types.</description>
    </item>
    
    <item>
      <title>Anonymous type equality</title>
      <link>http://localhost:1313/2011/04/anonymous-type-equality/</link>
      <pubDate>Sat, 23 Apr 2011 15:15:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/04/anonymous-type-equality/</guid>
      <description>Let&amp;rsquo;s say you instantiate two variables (a and b) using anonymous types. They both have the same two properties (x and y) with equal values.
 1: var a = new { x = 1, y = 2 }; 2: var b = new { y = 2, x = 1 };  Do you think these two variables are equal?
 1: var areEquel = a.Equals(b); 2: Console.WriteLine(areEquel); //Prints false :O  These two variables are not equal.</description>
    </item>
    
    <item>
      <title>Using C# keywords as variables</title>
      <link>http://localhost:1313/2011/04/using-c#-keywords-as-variables/</link>
      <pubDate>Mon, 11 Apr 2011 19:00:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/04/using-c#-keywords-as-variables/</guid>
      <description>Hold it, don&amp;rsquo;t shoot me. I know this would be an awful practice, but it is an interesting C# compiler quirk nonetheless.
 Keywords are predefined reserved identifiers that have special meanings to the compiler. They cannot be used as identifiers in your program unless they include @ as a prefix. For example, @if is a legal identifier but if is not because it is a keyword.
 static void Main(string[] args) { var @if = &amp;quot;oh my.</description>
    </item>
    
    <item>
      <title>Using JSON serialization outside a web context</title>
      <link>http://localhost:1313/2011/02/using-json-serialization-outside-a-web-context/</link>
      <pubDate>Sun, 06 Feb 2011 16:00:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/02/using-json-serialization-outside-a-web-context/</guid>
      <description>You usually are in a web context if you are working with JSON, where JSON serialization almost always is encapsulated by the framework. You might accidentally come across scenarios where you want to serialize and deserialize JSON in a non-web context though.
Turns out this is fairly trivial since .NET 3.5. .NET 3.5 added the JavaScriptSerializer class. You can find this class in the System.Web.Script.Serialization namespace. To access this namespace you need to reference the System.</description>
    </item>
    
    <item>
      <title>Hello world with Kayak and OWIN</title>
      <link>http://localhost:1313/2011/01/hello-world-with-kayak-and-owin/</link>
      <pubDate>Sun, 23 Jan 2011 19:00:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/01/hello-world-with-kayak-and-owin/</guid>
      <description>Kayak is a lightweight opensource C# webserver which implements OWIN. OWIN stands for Open Web Interface for .NET.
Hello World
Hosting your own application using Kayak is relatively simple.
In this example I&amp;rsquo;m using a console application to run the Kayak webserver. This application has one dependency: the Kayak project.
First create a new instance of the DotNetServer. This class is an IKayakServer implementation using System.NET.Sockets.Socket. Once the instance is created you can call the Start() method.</description>
    </item>
    
    <item>
      <title>Extension method: IEnumerable&lt;DateTime?&gt;.AreChronological()</title>
      <link>http://localhost:1313/2010/08/extension-method-ienumerabledatetime.arechronological/</link>
      <pubDate>Sun, 22 Aug 2010 13:54:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/08/extension-method-ienumerabledatetime.arechronological/</guid>
      <description>In this post you can find an extension method which extends IEnumerable&amp;lt;DateTime?&amp;gt;. The AreChronological extension method tests if the items in the IEnumerable&amp;lt;DateTime?&amp;gt; are in chronological order.
There are multiple ways you can solve this problem.
Imperative solution 1: public static class DateTimeExtensions 2: { 3: public static bool AreChronological(this IEnumerable&amp;lt;DateTime?&amp;gt; dateTimes) 4: { 5: var prev = (DateTime?)DateTime.MinValue; 6: 7: foreach (var dateTime in dateTimes) 8: { 9: if (dateTime !</description>
    </item>
    
    <item>
      <title>Extension method: DateTime.IsInFuture()</title>
      <link>http://localhost:1313/2010/08/extension-method-datetime.isinfuture/</link>
      <pubDate>Sun, 22 Aug 2010 13:03:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/08/extension-method-datetime.isinfuture/</guid>
      <description>In this post you can find a simple DateTime extension method. The IsInFuture method simply returns a boolean indicating whether the DateTime instance is in the future or not.
 1: public static class DateTimeExtensions 2: { 3: public static bool IsInFuture(this DateTime dateTime) 4: { 5: int compareResult = DateTime.Compare(dateTime, DateTime.Now); 6: 7: return compareResult != -1; 8: } 9: }  You can use it like this..
 1: DateTime dateTimeInPast = new DateTime(2010, 5, 20); 2: DateTime dateTimeInFuture = new DateTime(2025, 11, 20); 3: 4: Console.</description>
    </item>
    
    <item>
      <title>Switching with non-constant cases in C#</title>
      <link>http://localhost:1313/2010/07/switching-with-non-constant-cases-in-c/</link>
      <pubDate>Wed, 14 Jul 2010 22:25:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/07/switching-with-non-constant-cases-in-c/</guid>
      <description>Last week I came across a scenario where I wanted to switch over non-constants (aka variables), but while I was compiling I got Compiler Error CS0150 (A constant value is expected). This is one of those things I always forget. You can&amp;rsquo;t use variables in your case statements because the C# compiler doesn&amp;rsquo;t allow you to. It&amp;rsquo;s very logical though, the compiler forces you to use constants because otherwise there is no way of knowing there are equal case statements.</description>
    </item>
    
    <item>
      <title>Follow up: Eliminating redundant eventhandlers using a dictionary to map controls</title>
      <link>http://localhost:1313/2010/07/follow-up-eliminating-redundant-eventhandlers-using-a-dictionary-to-map-controls/</link>
      <pubDate>Tue, 13 Jul 2010 20:55:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/07/follow-up-eliminating-redundant-eventhandlers-using-a-dictionary-to-map-controls/</guid>
      <description>Yesterday I blogged on &amp;lsquo;WebForms refactoring: Eliminating redundant eventhandlers using a dictionary to map controls&#39;. In this post I went from bad code to better code. A smart reader gave me some good pointers on how to improve this code some more. Another iteration was necessary.
Losing the LinqIn the previous iteration I used Linq to search my dictionary.
 1: var res = mappings.Where(map =&amp;gt; map.Key.Equals((CheckBox)sender)).First();  This is overhead, because the dictionary implements an indexer.</description>
    </item>
    
    <item>
      <title>WebForms refactoring: Eliminating redundant eventhandlers using a dictionary to map controls</title>
      <link>http://localhost:1313/2010/07/webforms-refactoring-eliminating-redundant-eventhandlers-using-a-dictionary-to-map-controls/</link>
      <pubDate>Mon, 12 Jul 2010 21:35:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/07/webforms-refactoring-eliminating-redundant-eventhandlers-using-a-dictionary-to-map-controls/</guid>
      <description>Last week I came across a problem which seemed trivial at first sight, but turned out to be a pretty fun refactoring challenge.
The scenarioThe real problem was a bit more complex, but for simplicity&amp;rsquo;s sake I made this example. In this form there are three checkboxes which map with the textboxes next to them. If the checkbox gets unchecked the corresponding textboxes should be cleared.

First iterationI warn you.</description>
    </item>
    
    <item>
      <title>.NET API for PasteHTML</title>
      <link>http://localhost:1313/2010/06/.net-api-for-pastehtml/</link>
      <pubDate>Sun, 20 Jun 2010 16:10:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/06/.net-api-for-pastehtml/</guid>
      <description>PasteHTML is a website which lets you upload and share HTML pages. It&amp;rsquo;s free, anonymous and without registration. The uploaded pages should stay online forever.
The only drawback is that you can&amp;rsquo;t edit or delete your uploaded pages in an easy way yet. It is ad free, but I guess there will be some advertisements in the future when hosting costs increase.
You can make a POST request to upload a page through their public API.</description>
    </item>
    
    <item>
      <title>Handling the AggregateException</title>
      <link>http://localhost:1313/2010/05/handling-the-aggregateexception/</link>
      <pubDate>Sun, 23 May 2010 13:10:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/05/handling-the-aggregateexception/</guid>
      <description>Last week I showed you how you can use the AggregateException to apply consistent exception handling in batch operations. You can find that post here.
Bart De Smet read that post and pointed out that I should check out the Handle method of the AggregateException.
The Handle methodAs found in the MSDN documentation.
Description
 Invokes a handler on each Exception contained by this AggregateException.
 Parameters
 System.Func&amp;lt;Exception, Boolean&amp;gt; predicate</description>
    </item>
    
    <item>
      <title>Exception handling in batch operations with the AggregateException</title>
      <link>http://localhost:1313/2010/05/exception-handling-in-batch-operations-with-the-aggregateexception/</link>
      <pubDate>Sat, 15 May 2010 18:34:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/05/exception-handling-in-batch-operations-with-the-aggregateexception/</guid>
      <description>Doing batch operations and elegantly handling exceptions is a problem which every developer has faced before. In .NET 3.5 or older there is no out-of-the-box solution to handle exceptions in these types of scenarios, without being inconsistent to the normal flow of exception handling. .NET 4 introduces the AggregateException; an exception representing multiple exceptions. The AggregateException was introduced in the first place to be used with the parallel framework, but it can be used in other scenarios as well, such as batch operations.</description>
    </item>
    
    <item>
      <title>Doing the groceries in parallel</title>
      <link>http://localhost:1313/2010/05/doing-the-groceries-in-parallel/</link>
      <pubDate>Mon, 10 May 2010 20:36:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/05/doing-the-groceries-in-parallel/</guid>
      <description>I&amp;rsquo;ve started reading the excellent paper &amp;ldquo;Patterns for Parallel Programming: Understanding and Applying Parallel Patterns with the .NET Framework 4&amp;quot;.
There is a section in this whitepaper which explains perfectly why parallel programming was and still is such an interesting problem.
 Consider an analogy: shopping with some friends at a grocery store. You come into the store with a grocery list, and you rip the list into one piece per friend, such that every friend is responsible for retrieving the elements on his or her list.</description>
    </item>
    
    <item>
      <title>Quick and dirty tool for sending UDP packets</title>
      <link>http://localhost:1313/2010/03/quick-and-dirty-tool-for-sending-udp-packets/</link>
      <pubDate>Mon, 15 Mar 2010 18:57:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2010/03/quick-and-dirty-tool-for-sending-udp-packets/</guid>
      <description>While I was playing with my UDPListener I needed a small tool which could send some UDP packets to a certain hostname and port. That&amp;rsquo;s why I wrote a console application which uses an UdpClient to send some UDP packets. It&amp;rsquo;s quick and dirty, but it serves the cause.
 1: namespace UdpSender 2: { 3: class Program 4: { 5: //Constants 6: private const string HOSTNAME = &amp;quot;LocalHost&amp;quot;; 7: private const int PORT = 800; 8: private const int TIMES = 5; 9: private const string MESSAGE = &amp;quot;This is a TestMessage&amp;quot;; 10: private const int SLEEP = 50; 11: 12: static void Main(string[] args) 13: { 14: using (UdpClient client = new UdpClient()) 15: { 16: //Connect 17: client.</description>
    </item>
    
    <item>
      <title>Listening for UDP packets in a Windows service using an UdpClient</title>
      <link>http://localhost:1313/2010/03/listening-for-udp-packets-in-a-windows-service-using-an-udpclient/</link>
      <pubDate>Sun, 14 Mar 2010 16:00:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2010/03/listening-for-udp-packets-in-a-windows-service-using-an-udpclient/</guid>
      <description>In this post, I&amp;rsquo;ll show you how can you listen for UDP packets in a Windows service.
OnStartWhen the service starts, I set the started flag to true, initialize the ManualResetEvent, initialize an UdpClient and a WorkingThread. The ManualResetEvent will help us on a later stage to make our service stop elegantly.
 1: protected override void OnStart(string[] args) 2: { 3: Start(); 4: } 5: 6: public void Start() 7: { 8: m_started = true; 9: 10: m_stop = new ManualResetEvent(false); 11: 12: InitializeUdpListener(); 13: InitializeWorkingThread(); 14: }  InitializingFirst we need to initialize an IPEndpoint.</description>
    </item>
    
    <item>
      <title>Cannot Start Service from the command line or debugger. A Windows Service must first be installed (using installutil.exe)..</title>
      <link>http://localhost:1313/2010/03/cannot-start-service-from-the-command-line-or-debugger.-a-windows-service-must-first-be-installed-using-installutil.exe../</link>
      <pubDate>Sat, 13 Mar 2010 16:36:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2010/03/cannot-start-service-from-the-command-line-or-debugger.-a-windows-service-must-first-be-installed-using-installutil.exe../</guid>
      <description>When you create a new Windows Service project and try to debug it, Visual Studio will show you a Windows Service Start Failure with the message &amp;ldquo;Cannot Start Service from the command line or debugger. A Windows Service must first be installed (using installutil.exe) and then started with the Server Explorer, Windows Services Administrative tool or the NET START command.&amp;quot;.

The trick my team and I use to workaround this problem, makes use of the service Debug flag.</description>
    </item>
    
    <item>
      <title>Add leading zeros to a number</title>
      <link>http://localhost:1313/2009/12/add-leading-zeros-to-a-number/</link>
      <pubDate>Mon, 07 Dec 2009 20:21:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/12/add-leading-zeros-to-a-number/</guid>
      <description>Todays post is a very small tip.
I saw the question &amp;ldquo;How to add leading zeros to a number&amp;rdquo; on the ASP.NET forums countless times before. And often the answers provide solutions that work, but are overkill as well.
The two cleanest methods I know are String.Format and PadLeft.
 1: Console.WriteLine(&amp;quot;Using .ToString()&amp;quot;); 2: Console.WriteLine(String.Format(&amp;quot;{0:0000}&amp;quot;, 16)); 3: 4: Console.WriteLine(&amp;quot;-------------------&amp;quot;); 5: 6: Console.WriteLine(&amp;quot;Using .PadLeft()&amp;quot;); 7: Console.WriteLine(Convert.ToString(16).PadLeft(4, &#39;0&#39;));  You can see the result here.</description>
    </item>
    
    <item>
      <title>Response.RedirectPermanent in .NET 3.5 and older</title>
      <link>http://localhost:1313/2009/12/response.redirectpermanent-in-.net-3.5-and-older/</link>
      <pubDate>Sat, 05 Dec 2009 17:50:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/12/response.redirectpermanent-in-.net-3.5-and-older/</guid>
      <description>One of the new features in ASP.NET 4.0 is permanently redirecting to a page using Response.RedirectPermanent.
 It is common practice in Web applications to move pages and other content around over time, which can lead to an accumulation of stale links in search engines. In ASP.NET, developers have traditionally handled requests to old URLs by using by using the Response.Redirect method to forward a request to the new URL. However, the Redirect method issues an HTTP 302 Found (temporary redirect) response, which results in an extra HTTP round trip when users attempt to access the old URLs.</description>
    </item>
    
    <item>
      <title>Book review: Professional Refactoring in C# &amp; ASP.NET</title>
      <link>http://localhost:1313/2009/11/book-review-professional-refactoring-in-c#-asp.net/</link>
      <pubDate>Tue, 17 Nov 2009 19:37:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/11/book-review-professional-refactoring-in-c#-asp.net/</guid>
      <description>Three months ago I was looking up to refactoring a legacy ASP.NET Webforms application. Although I was familiar with refactoring, I ordered &amp;ldquo;Professional Refactoring in C# &amp;amp; ASP.NET&amp;rdquo; by Daniejel Arsenovski to get deeper into refactoring.
The titleAlthough the title states &amp;ldquo;Professional&amp;rdquo;, I think this book should find it&amp;rsquo;s main audience in coding novices. Another problem with the title is the word ASP.NET in it. The book has one chapter covering ASP.</description>
    </item>
    
    <item>
      <title>Debugging &#34;SubReport could not be shown.&#34;</title>
      <link>http://localhost:1313/2009/09/debugging-subreport-could-not-be-shown./</link>
      <pubDate>Wed, 09 Sep 2009 18:41:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2009/09/debugging-subreport-could-not-be-shown./</guid>
      <description>I&amp;rsquo;ve been upgrading a local report which contains multiple subreports, and yes I got that &amp;ldquo;SubReport could not be shown.&amp;rdquo; error more than once.
Debugging this error is a pain in the a.. All you get is &amp;ldquo;SubReport could not be shown.&amp;quot;, making me want to punch my screen and scream &amp;ldquo;BUT WHY?&amp;ldquo;Just before breaking my screen and going on full tilt, I decided to take a step back and run through my checklist.</description>
    </item>
    
    <item>
      <title>Three common mistakes you should avoid when starting with Web Page Resources in ASP.NET</title>
      <link>http://localhost:1313/2009/09/three-common-mistakes-you-should-avoid-when-starting-with-web-page-resources-in-asp.net/</link>
      <pubDate>Tue, 08 Sep 2009 20:04:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2009/09/three-common-mistakes-you-should-avoid-when-starting-with-web-page-resources-in-asp.net/</guid>
      <description>This is a list of of three common mistakes made by developers who start using Web Page Resources in ASP.NET.
1. Not using the right format for the name of a local resources fileThe format of the name of a local resources file should be: PageName.PageExtension.resx.
If you don&amp;rsquo;t add the page extension (Aspx, Ascx), you will get the Exception &amp;ldquo;The resource object with key &amp;lsquo;PageTitle&amp;rsquo; was not found.&amp;quot;.
2. Not adding an App_LocalResources folder to each subfolderEach subfolder must have it&amp;rsquo;s own App_LocalResources folder, else ASP.</description>
    </item>
    
    <item>
      <title>Stored Procedures: Make them or break them</title>
      <link>http://localhost:1313/2009/02/stored-procedures-make-them-or-break-them/</link>
      <pubDate>Sun, 15 Feb 2009 18:58:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/02/stored-procedures-make-them-or-break-them/</guid>
      <description>I&amp;rsquo;ve been thinking about the use of stored procedures lately.
Some questions that popped up in my head: What are the advantages/disadvantages? When and how should they be used? Will they extinct with LINQ to SQL becoming more and more popular? Why should you store your queries in your database, instead of in your code..
I asked the opinion of a few ASP.NET/.NET professionals. Hope you find this interesting!
Kris Van Der Mast (Blog) Since I&amp;rsquo;m a consultant I have to go with the specifications of my clients.</description>
    </item>
    
    <item>
      <title>Interview with Curt Christianson (Part II)</title>
      <link>http://localhost:1313/2009/01/interview-with-curt-christianson-part-ii/</link>
      <pubDate>Mon, 12 Jan 2009 20:34:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/01/interview-with-curt-christianson-part-ii/</guid>
      <description>This is part II of the interview with Curt Christianson. For Part I go here.
Part 2: Technology Let me ask you some general questions about building a web application. What is your advise on setting up the layers of a web application. In the web application I&amp;rsquo;m currently working on we chose a not so standard architecture I guess. We have multiple &amp;ldquo;modules&amp;rdquo;, which are folders in practice. In the root of these modules we hold our aspx pages.</description>
    </item>
    
    <item>
      <title>Interview with Curt Christianson (Part I)</title>
      <link>http://localhost:1313/2009/01/interview-with-curt-christianson-part-i/</link>
      <pubDate>Thu, 08 Jan 2009 19:42:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/01/interview-with-curt-christianson-part-i/</guid>
      <description>Curt Christianson is one of the administrators of forums.asp.net. Last month I stumbled across his blog, and felt like I had to do an interview with him. And here we are!
I have divided his interview in two parts:
 His career and his life Some techtalk on mainly ASP.NET webproject-architecture mixed with a bit of AJAX and WPF  Part 1: Career and life Who are you? Where do you live?</description>
    </item>
    
  </channel>
</rss>