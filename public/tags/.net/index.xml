<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.NET on Jef Claes</title>
    <link>http://localhost:1313/tags/.net/</link>
    <description>Recent content in .NET on Jef Claes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Feb 2012 20:21:00 +0100</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Checking for anonymous types</title>
      <link>http://localhost:1313/2011/05/checking-for-anonymous-types/</link>
      <pubDate>Sat, 21 May 2011 18:00:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/05/checking-for-anonymous-types/</guid>
      <description>Because I blogged about anonymous types last month, I thought following method would also make an interesting post.
private static bool IsAnonymousType(Type type) { Debug.Assert(type != null, &amp;quot;Type should not be null&amp;quot;); // HACK: The only way to detect anonymous types right now. return Attribute.IsDefined(type, typeof(CompilerGeneratedAttribute), false) &amp;amp;&amp;amp; type.IsGenericType &amp;amp;&amp;amp; type.Name.Contains(&amp;quot;AnonymousType&amp;quot;) &amp;amp;&amp;amp; (type.Name.StartsWith(&amp;quot;&amp;lt;&amp;gt;&amp;quot;, StringComparison.OrdinalIgnoreCase) || type.Name.StartsWith(&amp;quot;VB$&amp;quot;, StringComparison.OrdinalIgnoreCase)) &amp;amp;&amp;amp; (type.Attributes &amp;amp; TypeAttributes.NotPublic) == TypeAttributes.NotPublic; }  For a type to be anonymous:</description>
    </item>
    
    <item>
      <title>Anonymous type equality follow-up: Equals()</title>
      <link>http://localhost:1313/2011/04/anonymous-type-equality-follow-up-equals/</link>
      <pubDate>Sun, 24 Apr 2011 12:30:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/04/anonymous-type-equality-follow-up-equals/</guid>
      <description>After publishing yesterday&amp;rsquo;s post on anonymous type equality, I received an interesting comment from a fellow redditor. He stated that even if the sequence of the property assignment were the same, the equality comparison would still return false, because the types generated by the C# compiler are reference types, making their references being tested for equality and not their data.
This is very true, unless the Equals() method is overridden. And this is exactly what the compiler does for us when we define anonymous types.</description>
    </item>
    
    <item>
      <title>Anonymous type equality</title>
      <link>http://localhost:1313/2011/04/anonymous-type-equality/</link>
      <pubDate>Sat, 23 Apr 2011 15:15:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/04/anonymous-type-equality/</guid>
      <description>Let&amp;rsquo;s say you instantiate two variables (a and b) using anonymous types. They both have the same two properties (x and y) with equal values.
 1: var a = new { x = 1, y = 2 }; 2: var b = new { y = 2, x = 1 };  Do you think these two variables are equal?
 1: var areEquel = a.Equals(b); 2: Console.WriteLine(areEquel); //Prints false :O  These two variables are not equal.</description>
    </item>
    
    <item>
      <title>Using C# keywords as variables</title>
      <link>http://localhost:1313/2011/04/using-c#-keywords-as-variables/</link>
      <pubDate>Mon, 11 Apr 2011 19:00:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/04/using-c#-keywords-as-variables/</guid>
      <description>Hold it, don&amp;rsquo;t shoot me. I know this would be an awful practice, but it is an interesting C# compiler quirk nonetheless.
 Keywords are predefined reserved identifiers that have special meanings to the compiler. They cannot be used as identifiers in your program unless they include @ as a prefix. For example, @if is a legal identifier but if is not because it is a keyword.
 static void Main(string[] args) { var @if = &amp;quot;oh my.</description>
    </item>
    
    <item>
      <title>Hello world with Kayak and OWIN</title>
      <link>http://localhost:1313/2011/01/hello-world-with-kayak-and-owin/</link>
      <pubDate>Sun, 23 Jan 2011 19:00:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/01/hello-world-with-kayak-and-owin/</guid>
      <description>Kayak is a lightweight opensource C# webserver which implements OWIN. OWIN stands for Open Web Interface for .NET.
Hello World
Hosting your own application using Kayak is relatively simple.
In this example I&amp;rsquo;m using a console application to run the Kayak webserver. This application has one dependency: the Kayak project.
First create a new instance of the DotNetServer. This class is an IKayakServer implementation using System.NET.Sockets.Socket. Once the instance is created you can call the Start() method.</description>
    </item>
    
    <item>
      <title>Switching with non-constant cases in C#</title>
      <link>http://localhost:1313/2010/07/switching-with-non-constant-cases-in-c/</link>
      <pubDate>Wed, 14 Jul 2010 22:25:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/07/switching-with-non-constant-cases-in-c/</guid>
      <description>Last week I came across a scenario where I wanted to switch over non-constants (aka variables), but while I was compiling I got Compiler Error CS0150 (A constant value is expected). This is one of those things I always forget. You can&amp;rsquo;t use variables in your case statements because the C# compiler doesn&amp;rsquo;t allow you to. It&amp;rsquo;s very logical though, the compiler forces you to use constants because otherwise there is no way of knowing there are equal case statements.</description>
    </item>
    
    <item>
      <title>Handling the AggregateException</title>
      <link>http://localhost:1313/2010/05/handling-the-aggregateexception/</link>
      <pubDate>Sun, 23 May 2010 13:10:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/05/handling-the-aggregateexception/</guid>
      <description>Last week I showed you how you can use the AggregateException to apply consistent exception handling in batch operations. You can find that post here.
Bart De Smet read that post and pointed out that I should check out the Handle method of the AggregateException.
The Handle methodAs found in the MSDN documentation.
Description
 Invokes a handler on each Exception contained by this AggregateException.
 Parameters
 System.Func&amp;lt;Exception, Boolean&amp;gt; predicate</description>
    </item>
    
    <item>
      <title>Exception handling in batch operations with the AggregateException</title>
      <link>http://localhost:1313/2010/05/exception-handling-in-batch-operations-with-the-aggregateexception/</link>
      <pubDate>Sat, 15 May 2010 18:34:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/05/exception-handling-in-batch-operations-with-the-aggregateexception/</guid>
      <description>Doing batch operations and elegantly handling exceptions is a problem which every developer has faced before. In .NET 3.5 or older there is no out-of-the-box solution to handle exceptions in these types of scenarios, without being inconsistent to the normal flow of exception handling. .NET 4 introduces the AggregateException; an exception representing multiple exceptions. The AggregateException was introduced in the first place to be used with the parallel framework, but it can be used in other scenarios as well, such as batch operations.</description>
    </item>
    
    <item>
      <title>Doing the groceries in parallel</title>
      <link>http://localhost:1313/2010/05/doing-the-groceries-in-parallel/</link>
      <pubDate>Mon, 10 May 2010 20:36:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/05/doing-the-groceries-in-parallel/</guid>
      <description>I&amp;rsquo;ve started reading the excellent paper &amp;ldquo;Patterns for Parallel Programming: Understanding and Applying Parallel Patterns with the .NET Framework 4&amp;quot;.
There is a section in this whitepaper which explains perfectly why parallel programming was and still is such an interesting problem.
 Consider an analogy: shopping with some friends at a grocery store. You come into the store with a grocery list, and you rip the list into one piece per friend, such that every friend is responsible for retrieving the elements on his or her list.</description>
    </item>
    
    <item>
      <title>Quick and dirty tool for sending UDP packets</title>
      <link>http://localhost:1313/2010/03/quick-and-dirty-tool-for-sending-udp-packets/</link>
      <pubDate>Mon, 15 Mar 2010 18:57:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2010/03/quick-and-dirty-tool-for-sending-udp-packets/</guid>
      <description>While I was playing with my UDPListener I needed a small tool which could send some UDP packets to a certain hostname and port. That&amp;rsquo;s why I wrote a console application which uses an UdpClient to send some UDP packets. It&amp;rsquo;s quick and dirty, but it serves the cause.
 1: namespace UdpSender 2: { 3: class Program 4: { 5: //Constants 6: private const string HOSTNAME = &amp;quot;LocalHost&amp;quot;; 7: private const int PORT = 800; 8: private const int TIMES = 5; 9: private const string MESSAGE = &amp;quot;This is a TestMessage&amp;quot;; 10: private const int SLEEP = 50; 11: 12: static void Main(string[] args) 13: { 14: using (UdpClient client = new UdpClient()) 15: { 16: //Connect 17: client.</description>
    </item>
    
    <item>
      <title>Listening for UDP packets in a Windows service using an UdpClient</title>
      <link>http://localhost:1313/2010/03/listening-for-udp-packets-in-a-windows-service-using-an-udpclient/</link>
      <pubDate>Sun, 14 Mar 2010 16:00:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2010/03/listening-for-udp-packets-in-a-windows-service-using-an-udpclient/</guid>
      <description>In this post, I&amp;rsquo;ll show you how can you listen for UDP packets in a Windows service.
OnStartWhen the service starts, I set the started flag to true, initialize the ManualResetEvent, initialize an UdpClient and a WorkingThread. The ManualResetEvent will help us on a later stage to make our service stop elegantly.
 1: protected override void OnStart(string[] args) 2: { 3: Start(); 4: } 5: 6: public void Start() 7: { 8: m_started = true; 9: 10: m_stop = new ManualResetEvent(false); 11: 12: InitializeUdpListener(); 13: InitializeWorkingThread(); 14: }  InitializingFirst we need to initialize an IPEndpoint.</description>
    </item>
    
    <item>
      <title>Cannot Start Service from the command line or debugger. A Windows Service must first be installed (using installutil.exe)..</title>
      <link>http://localhost:1313/2010/03/cannot-start-service-from-the-command-line-or-debugger.-a-windows-service-must-first-be-installed-using-installutil.exe../</link>
      <pubDate>Sat, 13 Mar 2010 16:36:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2010/03/cannot-start-service-from-the-command-line-or-debugger.-a-windows-service-must-first-be-installed-using-installutil.exe../</guid>
      <description>When you create a new Windows Service project and try to debug it, Visual Studio will show you a Windows Service Start Failure with the message &amp;ldquo;Cannot Start Service from the command line or debugger. A Windows Service must first be installed (using installutil.exe) and then started with the Server Explorer, Windows Services Administrative tool or the NET START command.&amp;quot;.

The trick my team and I use to workaround this problem, makes use of the service Debug flag.</description>
    </item>
    
    <item>
      <title>Response.RedirectPermanent in .NET 3.5 and older</title>
      <link>http://localhost:1313/2009/12/response.redirectpermanent-in-.net-3.5-and-older/</link>
      <pubDate>Sat, 05 Dec 2009 17:50:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/12/response.redirectpermanent-in-.net-3.5-and-older/</guid>
      <description>One of the new features in ASP.NET 4.0 is permanently redirecting to a page using Response.RedirectPermanent.
 It is common practice in Web applications to move pages and other content around over time, which can lead to an accumulation of stale links in search engines. In ASP.NET, developers have traditionally handled requests to old URLs by using by using the Response.Redirect method to forward a request to the new URL. However, the Redirect method issues an HTTP 302 Found (temporary redirect) response, which results in an extra HTTP round trip when users attempt to access the old URLs.</description>
    </item>
    
    <item>
      <title>Book review: Professional Refactoring in C# &amp; ASP.NET</title>
      <link>http://localhost:1313/2009/11/book-review-professional-refactoring-in-c#-asp.net/</link>
      <pubDate>Tue, 17 Nov 2009 19:37:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/11/book-review-professional-refactoring-in-c#-asp.net/</guid>
      <description>Three months ago I was looking up to refactoring a legacy ASP.NET Webforms application. Although I was familiar with refactoring, I ordered &amp;ldquo;Professional Refactoring in C# &amp;amp; ASP.NET&amp;rdquo; by Daniejel Arsenovski to get deeper into refactoring.
The titleAlthough the title states &amp;ldquo;Professional&amp;rdquo;, I think this book should find it&amp;rsquo;s main audience in coding novices. Another problem with the title is the word ASP.NET in it. The book has one chapter covering ASP.</description>
    </item>
    
    <item>
      <title>Stored Procedures: Make them or break them</title>
      <link>http://localhost:1313/2009/02/stored-procedures-make-them-or-break-them/</link>
      <pubDate>Sun, 15 Feb 2009 18:58:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/02/stored-procedures-make-them-or-break-them/</guid>
      <description>I&amp;rsquo;ve been thinking about the use of stored procedures lately.
Some questions that popped up in my head: What are the advantages/disadvantages? When and how should they be used? Will they extinct with LINQ to SQL becoming more and more popular? Why should you store your queries in your database, instead of in your code..
I asked the opinion of a few ASP.NET/.NET professionals. Hope you find this interesting!
Kris Van Der Mast (Blog) Since I&amp;rsquo;m a consultant I have to go with the specifications of my clients.</description>
    </item>
    
  </channel>
</rss>