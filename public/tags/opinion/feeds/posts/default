<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>opinion on Jef Claes</title>
    <link>https://jefclaes.be/tags/opinion/</link>
    <description>Recent content in opinion on Jef Claes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Feb 2017 00:20:00 +0100</lastBuildDate>
    
	<atom:link href="https://jefclaes.be/tags/opinion/feeds/posts/default" rel="self" type="application/rss" />
    
    
    <item>
      <title>Printing money - hacking loyalty points</title>
      <link>https://jefclaes.be/2017/02/printing-money-hacking-loyalty-points/</link>
      <pubDate>Sun, 12 Feb 2017 00:20:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2017/02/printing-money-hacking-loyalty-points/</guid>
      <description>At work, we&amp;rsquo;ve all grown quite vigilant when it comes to customers trying to cheat the system. A necessary trait when working in a domain where money flows back and forth and customers are always trying to find an edge that will turn the tables.
While most tend to leave this mindset at work, one colleague in particular, is always probing, trying to find cracks in the surface of everyday models.</description>
    </item>
    
    <item>
      <title>Everyone has to serve somebody, but software has to serve more than one</title>
      <link>https://jefclaes.be/2017/01/gotta-serve-somebody-or-somebodies.html</link>
      <pubDate>Fri, 13 Jan 2017 15:08:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2017/01/gotta-serve-somebody-or-somebodies.html</guid>
      <description>When people get paid to write software, we very often find some form of friction between the people that build the software and those that pay to have it built.
The company I joined three years ago was no exception. When I joined, they had just launched three months ago, weren&amp;rsquo;t seeing any return on investment and prospects weren&amp;rsquo;t too bright either.
I won&amp;rsquo;t lie, that first year was quite stressful.</description>
    </item>
    
    <item>
      <title>Side by side</title>
      <link>https://jefclaes.be/2015/02/side-by-side.html</link>
      <pubDate>Sun, 15 Feb 2015 17:34:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2015/02/side-by-side.html</guid>
      <description>This week marked my first year at my current employer. While that event went by rather silently, one year in, a few of my observations are finally shaping up to be cast into writing.
Where I used to work in the typical battery cage, I&amp;rsquo;m now part of a team of just four people, having the luxury of a big dedicated room to ourselves - a whole floor actually. The room is set up almost symmetrically; two desks on one side of the room and two more on the other side, with quite some space in between.</description>
    </item>
    
    <item>
      <title>TDD as the crack cocaine of software</title>
      <link>https://jefclaes.be/2014/12/tdd-as-crack-cocaine-of-software.html</link>
      <pubDate>Sun, 28 Dec 2014 17:29:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2014/12/tdd-as-crack-cocaine-of-software.html</guid>
      <description>The psychologist Mihaly Csikszentmihalyi popularized the term &amp;ldquo;flow&amp;rdquo; to describe states of absorption in which attention is so narrowly focused on an activity that a sense of time fades, along with the troubles and concerns of day-to-day life. &amp;ldquo;Flow provides an escape from the chaos of the quotidian,&amp;rdquo; he wrote.  This is a snippet from the highly recommended book Addiction by Design, which not only gives you an incredibly complete overview of the gambling industry, but also insights into the human psyche which apply far outside the domain of gambling.</description>
    </item>
    
    <item>
      <title>Solomon, the architect</title>
      <link>https://jefclaes.be/2014/08/solomon-architect.html</link>
      <pubDate>Tue, 26 Aug 2014 19:52:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2014/08/solomon-architect.html</guid>
      <description>Two junior developers who started working for the company at the same time, had been quite competitive with each other from the get-go. They had once been assigned to the same team, but because of the constant bickering, which had put a serious amount of stress on the team, one of them was pulled off the project and reassigned.
A good year later, just the two of them were assigned to a new smallish, but interesting in-house project.</description>
    </item>
    
    <item>
      <title>Tests as part of your code</title>
      <link>https://jefclaes.be/2014/03/tests-as-part-of-your-code.html</link>
      <pubDate>Sun, 09 Mar 2014 18:13:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2014/03/tests-as-part-of-your-code.html</guid>
      <description>In the last project I worked on - processing financial batches - we put a lot of effort in avoiding being silently wrong. The practice that contributed most was being religious about avoiding structures to ever be in an invalid state. Preconditions, invariants, value objects and immutability were key.
One of the things we had to do with these structures was writing them to disk in a specific banking format; all the accounts with their transactions for a specific day.</description>
    </item>
    
    <item>
      <title>Command and event semantics</title>
      <link>https://jefclaes.be/2014/01/command-and-event-semantics.html</link>
      <pubDate>Sun, 05 Jan 2014 18:12:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2014/01/command-and-event-semantics.html</guid>
      <description>Yesterday, I read this blog post by Michael Feathers. In the post he goes over a pain point he has often found himself struggling with while breaking down a large method; conditional statements. if (alarmEnabled) { var alarm = new Alarm(); ... alarm.Sound(); } Should we extract the if and the associated block into a new method, or just the content of the block? Is the condition too important to hide in a method?</description>
    </item>
    
    <item>
      <title>Observations over assumptions</title>
      <link>https://jefclaes.be/2013/11/observations-over-assumptions.html</link>
      <pubDate>Sun, 24 Nov 2013 18:08:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2013/11/observations-over-assumptions.html</guid>
      <description>I heard a story once about an engineer who worked on the Disneyland site when it opened in Anaheim, CA in 1955. A month before the park opened, the new grass and sod were being applied to the grounds as one of the last items to be completed before the big grand opening. The parking lot was some distance from the park&amp;rsquo;s gates and required a lot of turf. However, the sidewalks had not been planned or constructed to accommodate patterns.</description>
    </item>
    
    <item>
      <title>Event source all the things?</title>
      <link>https://jefclaes.be/2013/11/event-source-all-things.html</link>
      <pubDate>Sun, 03 Nov 2013 18:45:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2013/11/event-source-all-things.html</guid>
      <description>Having covered projections last week, I think I have come full circle in these posts that turned out to be a small preliminary series on event sourcing. Even though there are still a vast amount of nuances to discover, I think I&amp;rsquo;ve captured the gist of it. Even without running an event sourced system in production - I feel as if I somewhat have an idea of what event sourcing can bring to the table.</description>
    </item>
    
    <item>
      <title>My understanding of event sourcing</title>
      <link>https://jefclaes.be/2013/10/my-understanding-of-event-sourcing.html</link>
      <pubDate>Sun, 06 Oct 2013 18:32:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2013/10/my-understanding-of-event-sourcing.html</guid>
      <description>I&amp;rsquo;ve been studying event sourcing from a distance for little over a year now; reading online material and going through some of the excellent OS code. Unfortunately, there would be no value introducing it into my current project - it would even be a terrible idea, so I decided to satisfy my inquisitiveness by consolidating and sharing my understanding of the concept.
Domain events An event is something that happened in the past.</description>
    </item>
    
    <item>
      <title>Actor Model in COBOL</title>
      <link>https://jefclaes.be/2013/09/actor-model-in-cobol.html</link>
      <pubDate>Sun, 22 Sep 2013 16:38:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2013/09/actor-model-in-cobol.html</guid>
      <description>In an Actor system, each Actor acts as a self-contained and autonomous component. An Actor can only communicate with other Actors by exchanging messages - they are not allowed to share state. Messages are handled asynchronously, and are nondeterministic. The location of Actors should be transparent; they can either live on the same machine, or on a distributed system. These properties make the Actor Model a great fit for parallel and distributed computing.</description>
    </item>
    
    <item>
      <title>Inheritance is like Jenga</title>
      <link>https://jefclaes.be/2013/08/inheritance-is-like-jenga.html</link>
      <pubDate>Sun, 25 Aug 2013 18:18:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2013/08/inheritance-is-like-jenga.html</guid>
      <description>These last few days, I have been working on a piece of our codebase that accidentally got very inheritance heavy.
When it comes to inheritance versus composition, there are a few widely accepted rules of thumb out there. While prefer composition over inheritance doesn&amp;rsquo;t cover the nuances, it&amp;rsquo;s not terrible advice; composition will statistically often be the better solution. Steve McConnell&amp;rsquo;s composition defines a &amp;lsquo;has a&amp;rsquo;- relationship while inheritance defines an &amp;lsquo;is a&amp;rsquo;-relationship, gives you a more nuanced and simple tool to apply to a scenario.</description>
    </item>
    
    <item>
      <title>But I already wrote it</title>
      <link>https://jefclaes.be/2013/08/but-i-already-wrote-it.html</link>
      <pubDate>Sun, 18 Aug 2013 16:24:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2013/08/but-i-already-wrote-it.html</guid>
      <description>A few weeks ago, we set out to implement a feature that enabled back office users to set a new rate ahead of time. With our analyst and the involved user being out of the office for days, we had to solely rely on written requirements. Two of us skimmed the documents, but didn&amp;rsquo;t take the time to assure there wasn&amp;rsquo;t any ambiguity - it looked trivial really. I went back to what I was doing, while my colleague set out to implement this feature.</description>
    </item>
    
    <item>
      <title>Multiplayer Enterprise Architect</title>
      <link>https://jefclaes.be/2013/06/multiplayer-enterprise-architect.html</link>
      <pubDate>Sun, 30 Jun 2013 17:00:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2013/06/multiplayer-enterprise-architect.html</guid>
      <description>Hanging around in the pub after DDDX, I ended up talking to Alberto Brandolini. For those who have never met him; he&amp;rsquo;s very much into visualization. You will always see him carrying a drawing pad, with a dash of permanent marker on his cheek, and a few lost sticky notes on his back. I don&amp;rsquo;t know if it was the Italian accent and the strong gestures, or my mildly intoxicated condition, but the idea of visualization as an important tool grew on me even more that evening.</description>
    </item>
    
    <item>
      <title>Not handling edge cases, making them explicit instead</title>
      <link>https://jefclaes.be/2013/06/not-handling-edge-cases-making-them.html</link>
      <pubDate>Sun, 23 Jun 2013 16:49:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2013/06/not-handling-edge-cases-making-them.html</guid>
      <description>When I wrote about accidental entities earlier, we followed a consultant building software for a car rental company. In the meanwhile, he has finished implementing the registration of new cars. Next on the list is allowing customers to make a booking.
We managed to get the CEO to set a whole hour apart to walk us over how the booking system should work.
 CEO: &amp;ldquo;I&amp;rsquo;m not sure this meeting is going to take a whole hour though.</description>
    </item>
    
    <item>
      <title>Accidental entities - what about the UI?</title>
      <link>https://jefclaes.be/2013/06/accidental-entities-what-about-ui.html</link>
      <pubDate>Sun, 02 Jun 2013 16:24:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2013/06/accidental-entities-what-about-ui.html</guid>
      <description>This post is a follow-up to my previous blog post &amp;ldquo;Accidental entities - you don&amp;rsquo;t need that identity&amp;quot;.
In that post, we followed a consultant building an application for a car rental. One of the requirements was that the CEO could manage a collection of available colors. Although the tools at our disposal - a relational database and NHibernate - wanted to trick us into making a car reference one of these available colors by its identifier, we found out that the CEO really thinks of a car&amp;rsquo;s color as a value, and does not care about a color&amp;rsquo;s identity.</description>
    </item>
    
    <item>
      <title>Accidental entities - you don&#39;t need that identity</title>
      <link>https://jefclaes.be/2013/05/accidental-entities-you-dont-need-that.html</link>
      <pubDate>Sun, 26 May 2013 16:27:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2013/05/accidental-entities-you-dont-need-that.html</guid>
      <description>An entity is identified by an identifier, while value objects are identified by their value.
If I make a living renting cars to tourists, I might not care the least about the identity of the colors the cars came in. I just care about their value; Rosso Corsa, Azurro Metallic&amp;hellip; If I repaint the car, the color changes, and the previous color is abandoned as a whole.
However, if I were a car paint manufacturer, I would care a great deal about the identity of a color.</description>
    </item>
    
    <item>
      <title>Designing entities: immutability first</title>
      <link>https://jefclaes.be/2013/04/designing-entities-immutability-first.html</link>
      <pubDate>Sun, 07 Apr 2013 17:35:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2013/04/designing-entities-immutability-first.html</guid>
      <description>The first year I wrote software for a living I spent my days mostly writing forms over data applications; most of my efforts were wasted just trying to make things work using ASP.NET and the Webforms engine. It was only after a year and graduating from the School of Hard Knocks that I learned there is a lot more to building clean and maintainable software than knowing the ins&amp;rsquo; and outs&amp;rsquo; of a proprietary UI technology.</description>
    </item>
    
    <item>
      <title>My Christmas holiday project postmortem</title>
      <link>https://jefclaes.be/2013/02/my-christmas-holiday-project-postmortem.html</link>
      <pubDate>Sun, 24 Feb 2013 16:42:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2013/02/my-christmas-holiday-project-postmortem.html</guid>
      <description>Somewhere over a year and a half ago I discovered the music of Dire Straits, which has sparked a fanatical love and fascination for the guitar in me, and basically for every piece of music Mark Knopfler has ever touched (*). A year ago, I finally had the courage to pick up the guitar myself. Not sure if I&amp;rsquo;d stick with it, I made an uninformed purchase of a rather inexpensive Squier Jazzmaster, just because it somewhat resembled the real object of desire, a Fender Stratocaster.</description>
    </item>
    
    <item>
      <title>Adding the R to CQS: some storage options</title>
      <link>https://jefclaes.be/2013/02/adding-r-to-cqs-some-storage-options.html</link>
      <pubDate>Sun, 17 Feb 2013 17:57:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2013/02/adding-r-to-cqs-some-storage-options.html</guid>
      <description>I&amp;rsquo;ve been writing quite a bit about CQS (or command and query separation) lately. In my last post on using events, I already hinted towards bringing in the R; command and query responsibility separation.
With CQS, commands can mutate data, while queries can only read that data. CQRS takes this one step further, and assigns commands and queries each a dedicated model; we now talk of a write side, and a read side.</description>
    </item>
    
    <item>
      <title>Premature judgement</title>
      <link>https://jefclaes.be/2013/02/premature-judgment.html</link>
      <pubDate>Sun, 10 Feb 2013 16:46:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2013/02/premature-judgment.html</guid>
      <description>When I started my first job, I hardly ever judged my peers. After all, how could I? Everything was unknown for me; I couldn&amp;rsquo;t differentiate good from bad. Over the years that has changed a bit, but with that, I&amp;rsquo;ve also slowly become more judgemental towards peers, often prematurely, and not always deservedly.
The first few months of last year, I found myself doing maintenance on a legacy code base between projects.</description>
    </item>
    
    <item>
      <title>It&#39;s not cake we are baking</title>
      <link>https://jefclaes.be/2012/12/its-not-cake-we-are-baking.html</link>
      <pubDate>Sun, 09 Dec 2012 16:08:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2012/12/its-not-cake-we-are-baking.html</guid>
      <description>I recently watched a talk on Vimeo where Christin Gorman talks about how cookie dough relates to Hibernate; why use the generic, bloated and one-fits-all solution when you can mix together your own yummy cookie dough? We should aspire to be the Gordon Ramsey of software, not the college student who can only cook Ramen noodles. If you haven&amp;rsquo;t watched or listened to her talk, you should; it&amp;rsquo;s only a few minutes long, and she brings it really well.</description>
    </item>
    
    <item>
      <title>Commuting? Have you done the math?</title>
      <link>https://jefclaes.be/2012/11/commuting-have-you-done-math.html</link>
      <pubDate>Sun, 04 Nov 2012 20:24:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2012/11/commuting-have-you-done-math.html</guid>
      <description>On my first job interview, over four years ago, I was asked whether I would relocate if I was hired. Back then, I still lived in the Campine region with my parents, while the Ferranti Computer Systems headquarters are in Antwerp. I thought about it for a few seconds and told the interviewer that I didn&amp;rsquo;t plan on moving out of my parents&amp;rsquo; place in the first few years. Besides, the distance isn&amp;rsquo;t that great; it&amp;rsquo;s only 60km (=37 miles) of highway, how bad could it be?</description>
    </item>
    
    <item>
      <title>On job titles</title>
      <link>https://jefclaes.be/2012/10/on-job-titles.html</link>
      <pubDate>Sun, 07 Oct 2012 19:22:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2012/10/on-job-titles.html</guid>
      <description>It didn&amp;rsquo;t take long before I noticed how little job titles mean. In my first job, you were assured to be granted a fancy title after only having acquired a minimum seniority, if you knew how to play the game. A more important sounding job title was HR&amp;rsquo;s default bribe that often kept people from leaving for greener pastures, for a short while. But even after being upgraded from a stable cleaner to a Senior Barn Hygiene Technician, you&amp;rsquo;re still cleaning shit though.</description>
    </item>
    
    <item>
      <title>Is serialization really that expensive?</title>
      <link>https://jefclaes.be/2012/08/is-serialization-really-that-expensive.html</link>
      <pubDate>Wed, 22 Aug 2012 13:19:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2012/08/is-serialization-really-that-expensive.html</guid>
      <description>While wading through an exotic codebase, I stumbled upon a static class named Convert. This class contained somewhere around 2700 (non-generated) lines of code, where each method manually converted some object to a simple textual representation. These methods were then used to convert requests and reponses to and from a remote third party service before logging them to the database for auditing reasons.
public static class Convert { public static string PaymentRequest(PaymentRequest req) { var sb = new StringBuilder(); sb.</description>
    </item>
    
    <item>
      <title>My learning resources distilled</title>
      <link>https://jefclaes.be/2012/08/my-learning-resources-distilled.html</link>
      <pubDate>Sun, 19 Aug 2012 16:10:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2012/08/my-learning-resources-distilled.html</guid>
      <description>I have picked up a few new tools this summer (MongoDB, NancyFx and WebAPI), and it occurred to me that I&amp;rsquo;ve built certain habits these last few years in how I make use of all the learning resources out there.
I tried to identify all of them, to then categorize them, to finally order them according to in which phase of my study process I use them.
The written and spoken word The first thing I look for online is documentation.</description>
    </item>
    
    <item>
      <title>The &#39;everyone should learn to code&#39; dilemma</title>
      <link>https://jefclaes.be/2012/06/everyone-should-learn-to-code-dilemma.html</link>
      <pubDate>Sun, 03 Jun 2012 16:40:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2012/06/everyone-should-learn-to-code-dilemma.html</guid>
      <description>Back when I was working on software for fire departments, we started thinking about reworking a critical piece of our solution: deployment plans. In a fire department domain, deployment plans help to make a suggestion to the dispatcher about which units should be dispatched to a location when an incident is called in. The suggested composition of units depends on a wide range of variables: availability, response time, ranks, type of incident, required tools, &amp;hellip; , even politics.</description>
    </item>
    
    <item>
      <title>The open plan fallacy testimonials</title>
      <link>https://jefclaes.be/2012/05/open-plan-fallacy-testimonials.html</link>
      <pubDate>Sun, 27 May 2012 15:36:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2012/05/open-plan-fallacy-testimonials.html</guid>
      <description>I wrote an article titled &amp;lsquo;The open plan fallacy&amp;rsquo; just two weeks ago. Earlier this week a similar article was published by the New York Times. The content of that article wasn&amp;rsquo;t particularly extraordinary, but the comments were. I waded through all of them on my daily commute, and it&amp;rsquo;s really hard to find one in favor of open plan offices - people seem to be enraged.
I handpicked some of the most interesting ones.</description>
    </item>
    
    <item>
      <title>The open plan fallacy</title>
      <link>https://jefclaes.be/2012/05/open-plan-fallacy.html</link>
      <pubDate>Sun, 13 May 2012 16:20:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2012/05/open-plan-fallacy.html</guid>
      <description>I haven&amp;rsquo;t worked in a whole lot of places, somewhere around four, but every single one of them used an open plan to structure their workplace. From what I hear from others, it&amp;rsquo;s the standard.
There are a few things to say about the advantages of an open office layout. They should stimulate communication, create more opportunities for observing and learning from others and be more cost-effective. I&amp;rsquo;m afraid it&amp;rsquo;s the latter which is the biggest driver though.</description>
    </item>
    
    <item>
      <title>Why I will always love RSS</title>
      <link>https://jefclaes.be/2012/05/why-i-will-always-love-rss.html</link>
      <pubDate>Sun, 06 May 2012 16:50:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2012/05/why-i-will-always-love-rss.html</guid>
      <description>There has been a lot of noise in the tech community earlier this year about how RSS is supposedly having one foot in the grave. If that would be even remotely true, I hope it dies with its boots on. The herald would be browsers and social networking sites killing or hiding support for RSS. While that may be true, their motives shouldn&amp;rsquo;t rig our opinions.
RSS has never worked out for the regular consumer, not directly anyways.</description>
    </item>
    
    <item>
      <title>Some Servicelocator pattern stinks</title>
      <link>https://jefclaes.be/2012/04/some-servicelocator-pattern-stinks.html</link>
      <pubDate>Tue, 17 Apr 2012 20:33:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2012/04/some-servicelocator-pattern-stinks.html</guid>
      <description>I have been working on a somewhat legacy codebase which makes use of the Servicelocator pattern. Although I always thought of Dependecy Injection to be the superior pattern, I was pleased to find some Inversion of Control implementation in there. Working with the codebase, I discovered first hand how easily, when used without caution and discipline, the Servicelocator pattern can introduce code rot.
I will walk you through some of the issues I have with the Servicelocator pattern, mostly looking at it from a test perspective.</description>
    </item>
    
    <item>
      <title>Learning: the Hacker Way</title>
      <link>https://jefclaes.be/2012/03/learning-the-hacker-way/</link>
      <pubDate>Sun, 11 Mar 2012 11:08:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2012/03/learning-the-hacker-way/</guid>
      <description>I have had a fair amount of discussions on continuous learning and knowledge sharing the past few days. It became rather obvious that a lot of us have developed their own techniques, but also that maybe most of us are still in search of more efficient techniques. Having gone through several phases myself, I would like to share my current way of learning: the Hacker Way.
Here are some snippets taken from a recent letter from Mark Zuckerberg addressed to the Facebook shareholders.</description>
    </item>
    
    <item>
      <title>There&#39;s no place for monogamy in technology</title>
      <link>https://jefclaes.be/2012/02/theres-no-place-for-monogamy-in.html</link>
      <pubDate>Mon, 20 Feb 2012 08:43:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2012/02/theres-no-place-for-monogamy-in.html</guid>
      <description>In this post I would like to share some of my thoughts on a recent post by James Hague titled &amp;lsquo;Don&amp;rsquo;t Fall in Love With Your Technology&amp;rsquo;. If you haven&amp;rsquo;t read that post yet, please do, it&amp;rsquo;s so short that me summarizing it here would be silly.
I think there is nothing wrong with falling in love with your technology per se. If you want to have a fair relationship with your technology, you have to invest in her.</description>
    </item>
    
    <item>
      <title>When should you take performance into consideration?</title>
      <link>https://jefclaes.be/2011/11/when-should-you-take-performance-into.html</link>
      <pubDate>Sun, 27 Nov 2011 17:55:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2011/11/when-should-you-take-performance-into.html</guid>
      <description>Before publishing my previous post on rewriting an if, I knew some people would hate it, because the refactored construct is less performant.
Although I think performance is important, relevant performance improvements are, apart from in tight loops, hardly ever to find in language constructs. To put it more bluntly, they are a waste of time. When translating your thoughts into code, you should aim to make your intentions as clear as possible for the person who comes after you.</description>
    </item>
    
    <item>
      <title>Blame no one but yourself</title>
      <link>https://jefclaes.be/2011/11/blame-no-one-but-yourself.html</link>
      <pubDate>Wed, 23 Nov 2011 21:24:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2011/11/blame-no-one-but-yourself.html</guid>
      <description>Blame no one but yourself. This is one of the few quotes I remember months after reading this book. Although it&amp;rsquo;s a harsh statement, there definitely is some truth to it.
Once I started observing my own behavior when faced with failure, I caught myself regularly blaming others for failures to which I am - at least - an accomplice.
Think about it. You might be guilty of this too.</description>
    </item>
    
    <item>
      <title>Daydreaming about jQuery Mobile and the WebAPI</title>
      <link>https://jefclaes.be/2011/11/blame-no-one-but-yourself.html</link>
      <pubDate>Sun, 20 Nov 2011 17:24:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2011/11/blame-no-one-but-yourself.html</guid>
      <description>I recently blogged about programming for the future of mobile with jQuery Mobile and the WebAPI. You probably heard that jQuery Mobile 1.0 was released earlier this week. Although it will take a while before we will see some actual results from the WebAPI initiative, that shouldn&amp;rsquo;t keep us from letting our minds play with things that might be possible one day using the WebAPI.
The thoughts in this post were provoked by an interesting comment Kristof Claes left on my previous post.</description>
    </item>
    
    <item>
      <title>The gift of legacy</title>
      <link>https://jefclaes.be/2011/10/gift-of-legacy.html</link>
      <pubDate>Sun, 30 Oct 2011 13:36:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2011/10/gift-of-legacy.html</guid>
      <description>Just after graduating, I hated legacy with the heat of a thousand suns. I felt unfortunate, having to work on old code, built using outdated technologies, while software is all about making new and shiny things. Right, guys? Those naïve expectations of a rookie got crumbled very soon. Legacy is a constant in our industry. You can try to ignore it as long as possible, but it&amp;rsquo;s impossible to keep that up forever.</description>
    </item>
    
    <item>
      <title>Comfortably numb</title>
      <link>https://jefclaes.be/2011/09/comfortably-numb.html</link>
      <pubDate>Wed, 21 Sep 2011 20:51:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2011/09/comfortably-numb.html</guid>
      <description>Something that can bother me tremendously is being surrounded by people who are in a constant state of being comfortably numb. People who don&amp;rsquo;t welcome change, try to scare away new concepts and are just too much at home in their comfort zone. Some are perfectly happy filling their days keeping up appearances of being busy. They don&amp;rsquo;t care about self-improvement, but only care about augmenting their paychecks by accumulating as much legacy baggage as possible, with the sole intention of being perceived as an irreplaceable asset to the company, whilst not having to leave their comfort zone.</description>
    </item>
    
    <item>
      <title>Building small things</title>
      <link>https://jefclaes.be/2011/09/building-small-things.html</link>
      <pubDate>Sun, 18 Sep 2011 16:35:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2011/09/building-small-things.html</guid>
      <description>Due to the nature of things we build in our day to day job, writing software can wear out even the most fit of us.
Most software jobs make you constantly deal with complexity. The amount of things which can lead to a complex software project are immense. A poor first design, and failure to redesign. External dependencies, which seem to behave different every time around. Or just the complexity of the problems itself.</description>
    </item>
    
    <item>
      <title>High Hopes</title>
      <link>https://jefclaes.be/2011/08/high-hopes.html</link>
      <pubDate>Mon, 08 Aug 2011 20:30:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2011/08/high-hopes.html</guid>
      <description>Last week, I resigned from my job at Ferranti Computer Systems. Three years ago, days after receiving my Graduate Diploma in Applied Computer Science, I had my first real-world working experience at Ferranti Computer Systems.
The first project I was assigned to, was a project for the Antwerp fire department. Along with two other graduates and four seniors, I was thrown in at the deep end. I always had solid grades in school, and was fairly confident that I grasped the material I was taught.</description>
    </item>
    
    <item>
      <title>Should we get this tool?</title>
      <link>https://jefclaes.be/2011/06/should-we-get-this-tool.html</link>
      <pubDate>Wed, 15 Jun 2011 21:45:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2011/06/should-we-get-this-tool.html</guid>
      <description>This is a decision that often needs to be made by middle management. For managers the most natural way to make this call is by evaluating the return on investment. To calculate the ROI, you need to compare the gain of an investment relative to the amount of investment. And this is exactly where things get hard, if not impossible. Measuring developer productivity is one of the unsolvable problems in our industry.</description>
    </item>
    
    <item>
      <title>My thoughts on WebMatrix</title>
      <link>https://jefclaes.be/2011/05/my-thoughts-on-webmatrix/</link>
      <pubDate>Mon, 09 May 2011 21:15:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2011/05/my-thoughts-on-webmatrix/</guid>
      <description>After building arealdeveloper.com, I felt like I had to do a follow-up post sharing my experiences with WebMatrix. While doing some research, I came across this post by Rob Connery. And frankly, I think it&amp;rsquo;s almost impossible for me to add something to his findings.
In a nutshell For those who are here for the &amp;ldquo;tl;dr&amp;rdquo;, here are my thoughts on WebMatrix..
WebMatrix is the perfect framework to start with ASP.</description>
    </item>
    
    <item>
      <title>Why I still buy real books</title>
      <link>https://jefclaes.be/2011/02/why-i-still-buy-real-books.html</link>
      <pubDate>Tue, 01 Feb 2011 08:30:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2011/02/why-i-still-buy-real-books.html</guid>
      <description>As a technology geek, it should be hard to keep ignoring the latest generation of eReaders (read: the Kindle). With over three million devices sold, the Kindle has proven that it adds value to people&amp;rsquo;s lives, and that it&amp;rsquo;s a lot more than just a gadget.
Some of the most obvious benefits&amp;hellip; You can carry a whole library in your backpack. The price of an eBook often is substantially less than the hardcover version.</description>
    </item>
    
    <item>
      <title>Why code reviews should be a team thing</title>
      <link>https://jefclaes.be/2009/08/why-codereviews-should-be-teamthing.html</link>
      <pubDate>Sun, 23 Aug 2009 19:22:00 +0200</pubDate>
      
      <guid>https://jefclaes.be/2009/08/why-codereviews-should-be-teamthing.html</guid>
      <description>Often code reviews are done by one person, the technical lead of your team.
In my opinion it&amp;rsquo;s better to make each developer of your team do code reviews.
My arguments  Having all developers do code reviews leads to discussions about what coding standards should be used.. Leading to well-documented standards. Each developer is forced to understand the workflow of an application which isn&amp;rsquo;t his, which expands his domain knowledge.</description>
    </item>
    
    <item>
      <title>Stored Procedures: Make them or break them</title>
      <link>https://jefclaes.be/2009/01/stored-procedures-make-them-or-break.html</link>
      <pubDate>Sun, 15 Feb 2009 18:58:00 +0100</pubDate>
      
      <guid>https://jefclaes.be/2009/01/stored-procedures-make-them-or-break.html</guid>
      <description>I&amp;rsquo;ve been thinking about the use of stored procedures lately.
Some questions that popped up in my head: What are the advantages/disadvantages? When and how should they be used? Will they extinct with LINQ to SQL becoming more and more popular? Why should you store your queries in your database, instead of in your code..
I asked the opinion of a few ASP.NET/.NET professionals. Hope you find this interesting!
Kris Van Der Mast (Blog)  Since I&amp;rsquo;m a consultant I have to go with the specifications of my clients.</description>
    </item>
    
  </channel>
</rss>