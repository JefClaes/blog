<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ramblings on Jef Claes</title>
    <link>http://localhost:1313/tags/ramblings/</link>
    <description>Recent content in Ramblings on Jef Claes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Feb 2012 08:43:00 +0100</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/ramblings/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>When should you take performance into consideration?</title>
      <link>http://localhost:1313/2011/11/when-should-you-take-performance-into-consideration/</link>
      <pubDate>Sun, 27 Nov 2011 17:55:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/11/when-should-you-take-performance-into-consideration/</guid>
      <description>Before publishing my previous post on rewriting an if, I knew some people would hate it, because the refactored construct is less performant.
Although I think performance is important, relevant performance improvements are, apart from in tight loops, hardly ever to find in language constructs. To put it more bluntly, they are a waste of time. When translating your thoughts into code, you should aim to make your intentions as clear as possible for the person who comes after you.</description>
    </item>
    
    <item>
      <title>Blame no one but yourself</title>
      <link>http://localhost:1313/2011/11/blame-no-one-but-yourself/</link>
      <pubDate>Wed, 23 Nov 2011 21:24:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/11/blame-no-one-but-yourself/</guid>
      <description>Blame no one but yourself. This is one of the few quotes I remember months after reading this book. Although it&amp;rsquo;s a harsh statement, there definitely is some truth to it.
Once I started observing my own behavior when faced with failure, I caught myself regularly blaming others for failures to which I am - at least - an accomplice.
Think about it. You might be guilty of this too.</description>
    </item>
    
    <item>
      <title>Daydreaming about jQuery Mobile and the WebAPI</title>
      <link>http://localhost:1313/2011/11/daydreaming-about-jquery-mobile-and-the-webapi/</link>
      <pubDate>Sun, 20 Nov 2011 17:24:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/11/daydreaming-about-jquery-mobile-and-the-webapi/</guid>
      <description>I recently blogged about programming for the future of mobile with jQuery Mobile and the WebAPI. You probably heard that jQuery Mobile 1.0 was released earlier this week. Although it will take a while before we will see some actual results from the WebAPI initiative, that shouldn&amp;rsquo;t keep us from letting our minds play with things that might be possible one day using the WebAPI.
The thoughts in this post were provoked by an interesting comment Kristof Claes left on my previous post.</description>
    </item>
    
    <item>
      <title>Programming for the future of mobile</title>
      <link>http://localhost:1313/2011/11/programming-for-the-future-of-mobile/</link>
      <pubDate>Wed, 09 Nov 2011 22:27:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/11/programming-for-the-future-of-mobile/</guid>
      <description>I have been working on something small on the side lately. I hardly have anything to show for it though, most of it is still being shaped in my head.
Anyhow, a very important part of the front-end is built using jQuery mobile. Although the framework hasn&amp;rsquo;t been released - release candidates are available though -, it&amp;rsquo;s something you should start looking into today. Why? Because the browser is the future of mobile applications.</description>
    </item>
    
    <item>
      <title>The gift of legacy</title>
      <link>http://localhost:1313/2011/10/the-gift-of-legacy/</link>
      <pubDate>Sun, 30 Oct 2011 13:36:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/10/the-gift-of-legacy/</guid>
      <description>Just after graduating, I hated legacy with the heat of a thousand suns. I felt unfortunate, having to work on old code, built using outdated technologies, while software is all about making new and shiny things. Right, guys? Those na√Øve expectations of a rookie got crumbled very soon. Legacy is a constant in our industry. You can try to ignore it as long as possible, but it&amp;rsquo;s impossible to keep that up forever.</description>
    </item>
    
    <item>
      <title>Oops, Pluralsight</title>
      <link>http://localhost:1313/2011/10/oops-pluralsight/</link>
      <pubDate>Wed, 26 Oct 2011 21:10:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/10/oops-pluralsight/</guid>
      <description>Only a few weeks ago, we got an annual Pluralsight subscription at Euricom. Since then, I have downloaded a couple of videos, raw wmv&amp;rsquo;s, to watch offline on my laptop, commuting.
Yesterday, being out of material, I headed over to the Pluralsight website to download some more content. I discovered the site was redesigned, removing download links next to the videos.
Heading over to their blog, I found out more.</description>
    </item>
    
    <item>
      <title>Should we get this tool?</title>
      <link>http://localhost:1313/2011/06/should-we-get-this-tool/</link>
      <pubDate>Wed, 15 Jun 2011 21:45:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/06/should-we-get-this-tool/</guid>
      <description>This is a decision that often needs to be made by middle management. For managers the most natural way to make this call is by evaluating the return on investment. To calculate the ROI, you need to compare the gain of an investment relative to the amount of investment. And this is exactly where things get hard, if not impossible. Measuring developer productivity is one of the unsolvable problems in our industry.</description>
    </item>
    
    <item>
      <title>Doing the groceries in parallel</title>
      <link>http://localhost:1313/2010/05/doing-the-groceries-in-parallel/</link>
      <pubDate>Mon, 10 May 2010 20:36:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/05/doing-the-groceries-in-parallel/</guid>
      <description>I&amp;rsquo;ve started reading the excellent paper &amp;ldquo;Patterns for Parallel Programming: Understanding and Applying Parallel Patterns with the .NET Framework 4&amp;quot;.
There is a section in this whitepaper which explains perfectly why parallel programming was and still is such an interesting problem.
 Consider an analogy: shopping with some friends at a grocery store. You come into the store with a grocery list, and you rip the list into one piece per friend, such that every friend is responsible for retrieving the elements on his or her list.</description>
    </item>
    
    <item>
      <title>Webforms lessons learned the hard way (Part 1)</title>
      <link>http://localhost:1313/2010/02/webforms-lessons-learned-the-hard-way-part-1/</link>
      <pubDate>Sun, 14 Feb 2010 16:22:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2010/02/webforms-lessons-learned-the-hard-way-part-1/</guid>
      <description>I&amp;rsquo;ve been spending a lot of my days in Webforms the last two years. In this post I want to share some best practices I&amp;rsquo;ve learned the hard way over these years. A lot of MVC developers might think this post comes a bit late (who still cares about Webforms?!), I do think (in the real world) a lot of the ASP.NET developers are still using Webforms. This post is directly targeting them.</description>
    </item>
    
    <item>
      <title>&#34;Excellence&#34; is a drive from inside, not outside</title>
      <link>http://localhost:1313/2010/01/excellence-is-a-drive-from-inside-not-outside/</link>
      <pubDate>Mon, 11 Jan 2010 15:06:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2010/01/excellence-is-a-drive-from-inside-not-outside/</guid>
      <description>A little story I found which I think relates to software development in a way..
 A tourist once visited a temple under construction where he saw a sculptor making an idol of God. Suddenly he noticed a similar idol lying nearby. Surprised, he asked the sculptor, &amp;ldquo;Do you need two statues of the same idol?&amp;rdquo; &amp;ldquo;No,&amp;rdquo; said the sculptor without looking up, &amp;ldquo;We need only one, but the first one got damaged at the last stage.</description>
    </item>
    
    <item>
      <title>Why the javascript beforeunload event is incomplete</title>
      <link>http://localhost:1313/2009/09/why-the-javascript-beforeunload-event-is-incomplete/</link>
      <pubDate>Sat, 12 Sep 2009 21:13:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2009/09/why-the-javascript-beforeunload-event-is-incomplete/</guid>
      <description>The onbeforeunload event fires when a page is being unloaded.
In the intranet webapplications world customers pretty often ask to show a warning when a user leaves a page (by closing the browser, closing a tab, clicking a link,..). This feature is specifically very interesting for data-input-driven webforms where one wrong click can make ten minutes of work undone.
Last week I had to implement this feature in a huge webform which is causing lots of postbacks (firing the onbeforeunload event).</description>
    </item>
    
    <item>
      <title>Why code reviews should be a teamthing</title>
      <link>http://localhost:1313/2009/08/why-code-reviews-should-be-a-teamthing/</link>
      <pubDate>Sun, 23 Aug 2009 19:22:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2009/08/why-code-reviews-should-be-a-teamthing/</guid>
      <description>Often code reviews are done by one person, the technical lead of your team.
In my opinion it&amp;rsquo;s better to make each developer of your team do code reviews.
My arguments Having all developers doing code reviews enforces well-documented coding standards.. Which also leads to discussions about what these codings tandards should be. Each developer is forced to understand the workflow of an application which isn&amp;rsquo;t his, which expands his domain knowledge.</description>
    </item>
    
  </channel>
</rss>