<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTML5 on Jef Claes</title>
    <link>http://localhost:1313/tags/html5/</link>
    <description>Recent content in HTML5 on Jef Claes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Jan 2012 20:56:00 +0100</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/html5/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Video, slides and source from my WebSockets talk</title>
      <link>http://localhost:1313/2011/04/video-slides-and-source-from-my-websockets-talk/</link>
      <pubDate>Thu, 07 Apr 2011 21:30:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/04/video-slides-and-source-from-my-websockets-talk/</guid>
      <description>Yesterday, I gave a talk on WebSockets at HTML5 WebCamps Belgium.
I got a lot of positive feedback on Twitter, which makes me a very happy panda!

You can already find the video of my session on Channel9.
The slides can be found on SlideShare.
If you want to play with the demo yourself, you can download the source:
 Make sure your firewall allows incoming TCP traffic on port 4502 Deploy the client access policy file to IIS Also host the Demo.</description>
    </item>
    
    <item>
      <title>Keeping WebSockets alive</title>
      <link>http://localhost:1313/2011/03/keeping-websockets-alive/</link>
      <pubDate>Sat, 12 Mar 2011 17:40:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/03/keeping-websockets-alive/</guid>
      <description>The problem with using stateful connections on an imperfect place as the internet is that connections might drop. The server or an intermediary can drop the connection due to an idle timeout. Even a temporary problem at the server or a local network hiccup might kill your connection.
If you aren&amp;rsquo;t prepared to handle these scenarios, you will not be able to fully rely on WebSockets.
A simple solution
The simplest solution is checking every few seconds whether the WebSocket is still opened.</description>
    </item>
    
    <item>
      <title>I will be talking at HTML5 WebCamps!</title>
      <link>http://localhost:1313/2011/03/i-will-be-talking-at-html5-webcamps/</link>
      <pubDate>Tue, 01 Mar 2011 12:56:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/03/i-will-be-talking-at-html5-webcamps/</guid>
      <description>HTML5 WebCamps is a free event organized by Microsoft Belgium and will take place on April 6th at Living Tomorrow.
In my session I will be talking about WebSockets.
 WebSockets on Fire
While the WebSockets API specification is not stable yet, various browser vendors have already implemented a prototype in their latest browser versions. Microsoft released their WebSockets prototype in December 2010. While there is no native implementation of WebSockets in IE9 just yet, for now they are providing a solution which works cross-browser, relying on a Silverlight client.</description>
    </item>
    
    <item>
      <title>HTML5: The WebSockets prototype with Silverlight, HTML Bridges and JavaScript</title>
      <link>http://localhost:1313/2011/01/html5-the-websockets-prototype-with-silverlight-html-bridges-and-javascript/</link>
      <pubDate>Wed, 12 Jan 2011 19:00:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/01/html5-the-websockets-prototype-with-silverlight-html-bridges-and-javascript/</guid>
      <description>Last weekend, I blogged on installing the WebSockets prototype and rebuilding the WebSockets chat server. In this post I will try to decompose the client-side chat sample to get a better feel of what&amp;rsquo;s going on in the browser.
If you have installed the WebSockets prototype, you should be able to browse to http://localhost/chat/wsdemo.html and stroll through the internals with me.

Dependencies
The chat sample has four script dependencies:</description>
    </item>
    
    <item>
      <title>HTML5: Rebuilding the WebSockets Server prototype</title>
      <link>http://localhost:1313/2011/01/html5-rebuilding-the-websockets-server-prototype/</link>
      <pubDate>Sun, 09 Jan 2011 18:45:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/01/html5-rebuilding-the-websockets-server-prototype/</guid>
      <description>Yesterday I blogged on installing the Microsoft WebSockets prototype with the Chat sample. The Chat sample needs a ChatService to broadcast the messages to all active sessions. The source code of this ChatService is not included in the package, that&amp;rsquo;s why I decompiled the executable using Reflector and rebuilt it.
In this post you can find how to rebuild the Chat Websockets Server.
Class diagram
Once we are finished, our class diagram should look like this.</description>
    </item>
    
    <item>
      <title>HTML5: Installing the Microsoft WebSockets prototype</title>
      <link>http://localhost:1313/2011/01/html5-installing-the-microsoft-websockets-prototype/</link>
      <pubDate>Sat, 08 Jan 2011 20:30:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/01/html5-installing-the-microsoft-websockets-prototype/</guid>
      <description>In December Microsoft launched the HTML5 Labs for experimental HTML5 technologies still under development. With the launch, they also released a WebSockets prototype.
In this post I will lead you through the process of installing the WebSockets prototype on your machine. By the end of this tutorial you should have a working chat web application sample.
Download
First you need to download and run the WebSockets prototype installer.
This package installs the binaries and samples in the %ProgramFiles%\Microsoft SDKs\WCF WebSockets\10.</description>
    </item>
    
  </channel>
</rss>