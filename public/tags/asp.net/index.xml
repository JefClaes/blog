<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASP.NET on Jef Claes</title>
    <link>http://localhost:1313/tags/asp.net/</link>
    <description>Recent content in ASP.NET on Jef Claes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Apr 2013 18:56:00 +0200</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/asp.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Released: Kill long meetings</title>
      <link>http://localhost:1313/2012/11/released-kill-long-meetings/</link>
      <pubDate>Sun, 25 Nov 2012 17:45:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2012/11/released-kill-long-meetings/</guid>
      <description>A lot has already been said and written about meetings, and some have carried the message above par; &amp;lsquo;Meetings: where work goes to die&#39;. Today, I&amp;rsquo;m not going to foul the internet with another rant, but I&amp;rsquo;d like to show you a small application built over the last few weeks after work.
I regularly find myself building small things as an antitoxin to the regular periods of not writing and shipping code at work.</description>
    </item>
    
    <item>
      <title>Post Web.NET Europe</title>
      <link>http://localhost:1313/2012/10/post-web.net-europe/</link>
      <pubDate>Mon, 22 Oct 2012 20:35:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/10/post-web.net-europe/</guid>
      <description>I attended and spoke at Web.NET Europe in Milan over the weekend. This was only my fourth full day- or more conference (Techdays Belgium, TechEd Berlin and HTML5 WebCamps), but it was undoubtedly the best one so far.
The quality of the sessions was definitely not inferior to those of bigger conferences. I especially enjoyed the talks on SignalR, OAuth and scaling data (I included some of my notes below). The strength of this conference doesn&amp;rsquo;t lie in the exceptional speakers or sessions though, but in its cozy size and the type of attendees it attracts.</description>
    </item>
    
    <item>
      <title>Slides and code from my Web.NET Europe REST and ASP.NET Web API session</title>
      <link>http://localhost:1313/2012/10/slides-and-code-from-my-web.net-europe-rest-and-asp.net-web-api-session/</link>
      <pubDate>Sun, 21 Oct 2012 00:16:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/10/slides-and-code-from-my-web.net-europe-rest-and-asp.net-web-api-session/</guid>
      <description>I just returned to the hotel after attending and speaking at Web.NET Europe 2012. There were multiple sessions on ASP.NET Web API today, and I was responsible for delivering the first one of the day. Being first, and to avoid overlap with others, I tried to lay a solid foundation by focusing on the REST and ASP.NET Web API basics: resources, identifiers, representations, verbs and hypermedia.
More people than I expected showed up for my talk; somewhere around 50 to 70 attendees, I guess.</description>
    </item>
    
    <item>
      <title>Slides and code from my Tunisia REST and ASP.NET Web API session</title>
      <link>http://localhost:1313/2012/09/slides-and-code-from-my-tunisia-rest-and-asp.net-web-api-session/</link>
      <pubDate>Thu, 13 Sep 2012 08:55:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/09/slides-and-code-from-my-tunisia-rest-and-asp.net-web-api-session/</guid>
      <description>I just returned from a four day trip to Tunisia with Euricom. Next to indulging on the sun, food and all-inclusive cocktails, getting to know each other in a less professional setting, we spent somewhere around half of our days - and this is a rather generous estimate - doing technical sessions and workshops.I gave a 90 minute long crash course on REST and ASP.NET Web API.
Content
REST Concepts Architectural values Left overs  ASP.</description>
    </item>
    
    <item>
      <title>Supporting the OPTIONS verb in ASP.NET Web API</title>
      <link>http://localhost:1313/2012/09/supporting-the-options-verb-in-asp.net-web-api/</link>
      <pubDate>Sun, 02 Sep 2012 18:27:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/09/supporting-the-options-verb-in-asp.net-web-api/</guid>
      <description>ASP.NET Web API controllers support only four HTTP verbs by convention: GET, PUT, POST and DELETE. The full list of existing HTTP verbs is more extensive though. One of those unsupported verbs which can be particularly useful for API discovery and documentation is the OPTIONS verb.
 The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI. This method allows the client to determine the options and/or requirements associated with a resource, or the capabilities of a server, without implying a resource action or initiating a resource retrieval.</description>
    </item>
    
    <item>
      <title>ASP.NET Web API error detail policy now defaults to the custom errors configuration</title>
      <link>http://localhost:1313/2012/08/asp.net-web-api-error-detail-policy-now-defaults-to-the-custom-errors-configuration/</link>
      <pubDate>Mon, 20 Aug 2012 08:50:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/08/asp.net-web-api-error-detail-policy-now-defaults-to-the-custom-errors-configuration/</guid>
      <description>While working on an already updated ASP.NET Web API project, I noticed an extra value in the IncludeErrorDetailPolicy enumeration. The IncludeErrorDetailPolicy configuration tells the Web API host when it&amp;rsquo;s allowed to include full error details in responses. Before updating, the RC version of the IncludeErrorDetailPolicy enumeration only had three possible values: LocalOnly, Always and Never. With the released version comes a new value: Default.
// Summary: // Use the default behavior for the host environment.</description>
    </item>
    
    <item>
      <title>Should I unit- or integration test my ASP.NET Web API services?</title>
      <link>http://localhost:1313/2012/07/should-i-unit-or-integration-test-my-asp.net-web-api-services/</link>
      <pubDate>Sun, 15 Jul 2012 22:37:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/07/should-i-unit-or-integration-test-my-asp.net-web-api-services/</guid>
      <description>Over the last two weeks, preparing for a talk, I have been doing some research on ASP.NET Web API. After working my way through the API, and the implementation of certain features, I looked at testing.
Similar to ASP.NET MVC, Web API allows you to create relatively small building blocks, which can replace parts of, or be added to an existing default global setup. This makes it possible for us to test each component in isolation: controllers, dependency resolvers, filters, serialization, type formatters, messagehandlers and routing.</description>
    </item>
    
    <item>
      <title>HtmlHelper to generate a top-level menu for areas</title>
      <link>http://localhost:1313/2012/07/htmlhelper-to-generate-a-top-level-menu-for-areas/</link>
      <pubDate>Sun, 08 Jul 2012 19:10:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/07/htmlhelper-to-generate-a-top-level-menu-for-areas/</guid>
      <description>Last week, we had to set up a new ASP.NET MVC web application, using a somewhat customized Twitter Bootstrap build. Because the application has multiple functional contexts, we divided it in multiple parts using areas. Since these areas were a one-to-one mapping with the top-level menu items, we tried abstracting the creation of the menu items, ánd the management of setting the active item, into an HtmlHelper.
Let&amp;rsquo;s say, for this example, that we have six areas: Images, Maps, Play, Search, Video and Blog, and we want to render a list item for each one of them.</description>
    </item>
    
    <item>
      <title>NancyFx Appharbor builds timing out</title>
      <link>http://localhost:1313/2012/06/nancyfx-appharbor-builds-timing-out/</link>
      <pubDate>Tue, 05 Jun 2012 21:26:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2012/06/nancyfx-appharbor-builds-timing-out/</guid>
      <description>I have been working on a petite portfolio site for my girlfriend which is implemented in NancyFx, hosted in ASP.NET. On deploying the project to Appharbor, my builds kept timing out. Since the build log was empty, I turned to Twitter for help. This fine gentleman provided me with a solution.
When you add the Razor view engine to your project using the Nuget package, the postbuild event of your project will be modified to xcopy some assemblies into the bin - which apparently is an Intellisense and precompilation thing.</description>
    </item>
    
    <item>
      <title>HTML5 Offline Web applications as an afterthought in ASP.NET MVC</title>
      <link>http://localhost:1313/2012/03/html5-offline-web-applications-as-an-afterthought-in-asp.net-mvc/</link>
      <pubDate>Wed, 14 Mar 2012 15:39:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2012/03/html5-offline-web-applications-as-an-afterthought-in-asp.net-mvc/</guid>
      <description>Recently I prototyped a mobile web application using ASP.NET MVC, jQuery Mobile and some HTML5 features. One of the key goals was to find out how far you can push a web &amp;lsquo;application&amp;rsquo; until the browser starts getting in the way. Working disconnected is one of these things that appear to be a major showstopper at first.
However - to my surprise honestly - the HTML5 Offline Web applications API seems to be widely implemented across modern browsers already.</description>
    </item>
    
    <item>
      <title>ASP.NET MVC4 bundling in ASP.NET MVC3</title>
      <link>http://localhost:1313/2012/02/asp.net-mvc4-bundling-in-asp.net-mvc3/</link>
      <pubDate>Sat, 25 Feb 2012 20:26:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2012/02/asp.net-mvc4-bundling-in-asp.net-mvc3/</guid>
      <description>One of the new wildly evangelized features of ASP.NET MVC4 is the built-in support for bundling and minification of scripts and stylesheets.
I don&amp;rsquo;t see any reason why this new feature wouldn&amp;rsquo;t work for ASP.NET MVC3 though. If you open the packages config of an ASP.NET MVC4 beta project, you will find that bundling support lives in the Microsoft.Web.Optimization package.
&amp;lt;package id=&amp;quot;Microsoft.Web.Optimization&amp;quot; version=&amp;quot;1.0.0-beta&amp;quot; /&amp;gt;  So we should just be able to install this package for an ASP.</description>
    </item>
    
    <item>
      <title>Testing DI bootstrappers</title>
      <link>http://localhost:1313/2012/02/testing-di-bootstrappers/</link>
      <pubDate>Mon, 06 Feb 2012 08:59:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2012/02/testing-di-bootstrappers/</guid>
      <description>While your Dependency Injection bootstrappers - being responsible for gluing your application together - are a vital part of your application, they are seldom put under test. I don&amp;rsquo;t see any reason why they shouldn&amp;rsquo;t be though. The cost of these tests is negligible, definitely if you compare it to the cost of the often catastrophical outcome of bugs in your bootstrappers.
I encourage you to take a look at the commit history of your DI bootstrappers; I bet they change a lot.</description>
    </item>
    
    <item>
      <title>Daydreaming about jQuery Mobile and the WebAPI</title>
      <link>http://localhost:1313/2011/11/daydreaming-about-jquery-mobile-and-the-webapi/</link>
      <pubDate>Sun, 20 Nov 2011 17:24:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/11/daydreaming-about-jquery-mobile-and-the-webapi/</guid>
      <description>I recently blogged about programming for the future of mobile with jQuery Mobile and the WebAPI. You probably heard that jQuery Mobile 1.0 was released earlier this week. Although it will take a while before we will see some actual results from the WebAPI initiative, that shouldn&amp;rsquo;t keep us from letting our minds play with things that might be possible one day using the WebAPI.
The thoughts in this post were provoked by an interesting comment Kristof Claes left on my previous post.</description>
    </item>
    
    <item>
      <title>Programming for the future of mobile</title>
      <link>http://localhost:1313/2011/11/programming-for-the-future-of-mobile/</link>
      <pubDate>Wed, 09 Nov 2011 22:27:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2011/11/programming-for-the-future-of-mobile/</guid>
      <description>I have been working on something small on the side lately. I hardly have anything to show for it though, most of it is still being shaped in my head.
Anyhow, a very important part of the front-end is built using jQuery mobile. Although the framework hasn&amp;rsquo;t been released - release candidates are available though -, it&amp;rsquo;s something you should start looking into today. Why? Because the browser is the future of mobile applications.</description>
    </item>
    
    <item>
      <title>Viewmodel extractors in ASP.NET MVC</title>
      <link>http://localhost:1313/2011/10/viewmodel-extractors-in-asp.net-mvc/</link>
      <pubDate>Mon, 17 Oct 2011 20:24:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/10/viewmodel-extractors-in-asp.net-mvc/</guid>
      <description>Last week, I wrote something on assembling viewmodels in ASP.NET MVC. In that post, I said it would be nice to have a layer between my controller and my domain services that would assemble viewmodels for me. This would work one-way. In the other direction - from controller to domain services - I would just take a piece of my composite viewmodel and pass that directly to my domain services.</description>
    </item>
    
    <item>
      <title>Viewmodel assemblers in ASP.NET MVC</title>
      <link>http://localhost:1313/2011/10/viewmodel-assemblers-in-asp.net-mvc/</link>
      <pubDate>Wed, 12 Oct 2011 20:14:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/10/viewmodel-assemblers-in-asp.net-mvc/</guid>
      <description>Working on a new ASP.NET MVC side-project, I have the luxury to experiment with new technologies, but also with different patterns and naming conventions.
Something which bugged me in a previous project was that we made our service layer return viewmodels. It worked rather well because the service layer in our MVC project was just another layer between the real domain services - where most of its work was creating viewmodels from domain objects or translating viewmodels into domain objects, so they could be passed to the domain services.</description>
    </item>
    
    <item>
      <title>Checking for anonymous types</title>
      <link>http://localhost:1313/2011/05/checking-for-anonymous-types/</link>
      <pubDate>Sat, 21 May 2011 18:00:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/05/checking-for-anonymous-types/</guid>
      <description>Because I blogged about anonymous types last month, I thought following method would also make an interesting post.
private static bool IsAnonymousType(Type type) { Debug.Assert(type != null, &amp;quot;Type should not be null&amp;quot;); // HACK: The only way to detect anonymous types right now. return Attribute.IsDefined(type, typeof(CompilerGeneratedAttribute), false) &amp;amp;&amp;amp; type.IsGenericType &amp;amp;&amp;amp; type.Name.Contains(&amp;quot;AnonymousType&amp;quot;) &amp;amp;&amp;amp; (type.Name.StartsWith(&amp;quot;&amp;lt;&amp;gt;&amp;quot;, StringComparison.OrdinalIgnoreCase) || type.Name.StartsWith(&amp;quot;VB$&amp;quot;, StringComparison.OrdinalIgnoreCase)) &amp;amp;&amp;amp; (type.Attributes &amp;amp; TypeAttributes.NotPublic) == TypeAttributes.NotPublic; }  For a type to be anonymous:</description>
    </item>
    
    <item>
      <title>My thoughts on WebMatrix</title>
      <link>http://localhost:1313/2011/05/my-thoughts-on-webmatrix/</link>
      <pubDate>Mon, 09 May 2011 21:15:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2011/05/my-thoughts-on-webmatrix/</guid>
      <description>After building arealdeveloper.com, I felt like I had to do a follow-up post sharing my experiences with WebMatrix. While doing some research, I came across this post by Rob Connery. And frankly, I think it&amp;rsquo;s almost impossible for me to add something to his findings.
In a nutshell
For those who are like &amp;ldquo;tl;dr&amp;rdquo;, here are my thoughts on WebMatrix..
WebMatrix is the perfect framework to start with ASP.NET development (wish I had).</description>
    </item>
    
    <item>
      <title>Things good to know about SQL State Server</title>
      <link>http://localhost:1313/2010/09/things-good-to-know-about-sql-state-server/</link>
      <pubDate>Thu, 23 Sep 2010 19:31:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/09/things-good-to-know-about-sql-state-server/</guid>
      <description>While installing a SQL State Server last week, I came across a few things worth sharing about the installation and use of SQL State Server.
Finding a good tutorialThere are lots of tutorials out there on how to install SQL State Server but most of them are not great. To do a basic installation you only need this Msdn documentation on how to run the Aspnet_regsql.exe tool and edit your web.</description>
    </item>
    
    <item>
      <title>Building a tagcloud with jQuery and ASMX Webservices</title>
      <link>http://localhost:1313/2010/09/building-a-tagcloud-with-jquery-and-asmx-webservices/</link>
      <pubDate>Sat, 18 Sep 2010 18:00:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/09/building-a-tagcloud-with-jquery-and-asmx-webservices/</guid>
      <description>Generating tagclouds is nothing new. People have been generating tagclouds server-side since the seventies. Lately more and more tagclouds are being generated client-side.
There is nothing wrong with generating tagclouds server-side. Telerik has a great tagcloud server control. Generating tagclouds server-side can bring some overhead though, so depending on the scenario and the requirements you might decide to do it client-side. There are a ton of fancy ready-to-use jQuery tagcloud plug-ins out there.</description>
    </item>
    
    <item>
      <title>Switching with non-constant cases in C#</title>
      <link>http://localhost:1313/2010/07/switching-with-non-constant-cases-in-c/</link>
      <pubDate>Wed, 14 Jul 2010 22:25:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/07/switching-with-non-constant-cases-in-c/</guid>
      <description>Last week I came across a scenario where I wanted to switch over non-constants (aka variables), but while I was compiling I got Compiler Error CS0150 (A constant value is expected). This is one of those things I always forget. You can&amp;rsquo;t use variables in your case statements because the C# compiler doesn&amp;rsquo;t allow you to. It&amp;rsquo;s very logical though, the compiler forces you to use constants because otherwise there is no way of knowing there are equal case statements.</description>
    </item>
    
    <item>
      <title>Follow up: Eliminating redundant eventhandlers using a dictionary to map controls</title>
      <link>http://localhost:1313/2010/07/follow-up-eliminating-redundant-eventhandlers-using-a-dictionary-to-map-controls/</link>
      <pubDate>Tue, 13 Jul 2010 20:55:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/07/follow-up-eliminating-redundant-eventhandlers-using-a-dictionary-to-map-controls/</guid>
      <description>Yesterday I blogged on &amp;lsquo;WebForms refactoring: Eliminating redundant eventhandlers using a dictionary to map controls&#39;. In this post I went from bad code to better code. A smart reader gave me some good pointers on how to improve this code some more. Another iteration was necessary.
Losing the LinqIn the previous iteration I used Linq to search my dictionary.
 1: var res = mappings.Where(map =&amp;gt; map.Key.Equals((CheckBox)sender)).First();  This is overhead, because the dictionary implements an indexer.</description>
    </item>
    
    <item>
      <title>WebForms refactoring: Eliminating redundant eventhandlers using a dictionary to map controls</title>
      <link>http://localhost:1313/2010/07/webforms-refactoring-eliminating-redundant-eventhandlers-using-a-dictionary-to-map-controls/</link>
      <pubDate>Mon, 12 Jul 2010 21:35:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/07/webforms-refactoring-eliminating-redundant-eventhandlers-using-a-dictionary-to-map-controls/</guid>
      <description>Last week I came across a problem which seemed trivial at first sight, but turned out to be a pretty fun refactoring challenge.
The scenarioThe real problem was a bit more complex, but for simplicity&amp;rsquo;s sake I made this example. In this form there are three checkboxes which map with the textboxes next to them. If the checkbox gets unchecked the corresponding textboxes should be cleared.

First iterationI warn you.</description>
    </item>
    
    <item>
      <title>The state of the client-side ASP.NET Ajax 4.0 framework</title>
      <link>http://localhost:1313/2010/04/the-state-of-the-client-side-asp.net-ajax-4.0-framework/</link>
      <pubDate>Mon, 19 Apr 2010 21:00:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2010/04/the-state-of-the-client-side-asp.net-ajax-4.0-framework/</guid>
      <description>The people who follow my blog might remember the ASP.NET Ajax 4.0 series. In these series I showed some of the core features of the ASP.NET Ajax 4.0 beta javascript library.
In January Microsoft told us that they would ship the ASP.NET Ajax 4.0 library as a part of the Microsoft Ajax framework, together with the release of ASP.NET 4.0. A few days ago I was ready to dig in the library a little deeper, but I found out that most of the documentation and resources I used to consult, had moved or had disappeared.</description>
    </item>
    
    <item>
      <title>Webforms lessons learned the hard way (Part 2)</title>
      <link>http://localhost:1313/2010/02/webforms-lessons-learned-the-hard-way-part-2/</link>
      <pubDate>Mon, 15 Feb 2010 17:43:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2010/02/webforms-lessons-learned-the-hard-way-part-2/</guid>
      <description>If you missed part 1, you can find it here.
Use the built-in goodiesASP.NET Webforms has a lot of good stuff built into it. Do your homework before you start building the next big Webforms thing! A perfect example of this is ASP.NET Membership. ASP.NET provides an out-of-box membership solution. I&amp;rsquo;ve seen people who were to lazy to do some research or thought they could do better and ended up with a solution which put its doors wide open to people with bad intentions.</description>
    </item>
    
    <item>
      <title>Webforms lessons learned the hard way (Part 1)</title>
      <link>http://localhost:1313/2010/02/webforms-lessons-learned-the-hard-way-part-1/</link>
      <pubDate>Sun, 14 Feb 2010 16:22:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2010/02/webforms-lessons-learned-the-hard-way-part-1/</guid>
      <description>I&amp;rsquo;ve been spending a lot of my days in Webforms the last two years. In this post I want to share some best practices I&amp;rsquo;ve learned the hard way over these years. A lot of MVC developers might think this post comes a bit late (who still cares about Webforms?!), I do think (in the real world) a lot of the ASP.NET developers are still using Webforms. This post is directly targeting them.</description>
    </item>
    
    <item>
      <title>The problem that ViewStateMode solves</title>
      <link>http://localhost:1313/2009/12/the-problem-that-viewstatemode-solves/</link>
      <pubDate>Sun, 13 Dec 2009 16:55:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/12/the-problem-that-viewstatemode-solves/</guid>
      <description>A new feature of ASP.NET 4.0 is the ViewStateMode property on a Control.
 You can use the ViewStateMode property to enable view state for an individual control even if view state is disabled for the page.
Source:Msdn
 In this post I&amp;rsquo;ll try to give this new feature a chance to shine and show it&amp;rsquo;s use.
Problem to solve: Disable ViewState on the Page and enable it on an individual Control.</description>
    </item>
    
    <item>
      <title>Response.RedirectPermanent in .NET 3.5 and older</title>
      <link>http://localhost:1313/2009/12/response.redirectpermanent-in-.net-3.5-and-older/</link>
      <pubDate>Sat, 05 Dec 2009 17:50:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/12/response.redirectpermanent-in-.net-3.5-and-older/</guid>
      <description>One of the new features in ASP.NET 4.0 is permanently redirecting to a page using Response.RedirectPermanent.
 It is common practice in Web applications to move pages and other content around over time, which can lead to an accumulation of stale links in search engines. In ASP.NET, developers have traditionally handled requests to old URLs by using by using the Response.Redirect method to forward a request to the new URL. However, the Redirect method issues an HTTP 302 Found (temporary redirect) response, which results in an extra HTTP round trip when users attempt to access the old URLs.</description>
    </item>
    
    <item>
      <title>Book review: Professional Refactoring in C# &amp; ASP.NET</title>
      <link>http://localhost:1313/2009/11/book-review-professional-refactoring-in-c#-asp.net/</link>
      <pubDate>Tue, 17 Nov 2009 19:37:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/11/book-review-professional-refactoring-in-c#-asp.net/</guid>
      <description>Three months ago I was looking up to refactoring a legacy ASP.NET Webforms application. Although I was familiar with refactoring, I ordered &amp;ldquo;Professional Refactoring in C# &amp;amp; ASP.NET&amp;rdquo; by Daniejel Arsenovski to get deeper into refactoring.
The titleAlthough the title states &amp;ldquo;Professional&amp;rdquo;, I think this book should find it&amp;rsquo;s main audience in coding novices. Another problem with the title is the word ASP.NET in it. The book has one chapter covering ASP.</description>
    </item>
    
    <item>
      <title>Why the javascript beforeunload event is incomplete</title>
      <link>http://localhost:1313/2009/09/why-the-javascript-beforeunload-event-is-incomplete/</link>
      <pubDate>Sat, 12 Sep 2009 21:13:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2009/09/why-the-javascript-beforeunload-event-is-incomplete/</guid>
      <description>The onbeforeunload event fires when a page is being unloaded.
In the intranet webapplications world customers pretty often ask to show a warning when a user leaves a page (by closing the browser, closing a tab, clicking a link,..). This feature is specifically very interesting for data-input-driven webforms where one wrong click can make ten minutes of work undone.
Last week I had to implement this feature in a huge webform which is causing lots of postbacks (firing the onbeforeunload event).</description>
    </item>
    
    <item>
      <title>Debugging &#34;SubReport could not be shown.&#34;</title>
      <link>http://localhost:1313/2009/09/debugging-subreport-could-not-be-shown./</link>
      <pubDate>Wed, 09 Sep 2009 18:41:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2009/09/debugging-subreport-could-not-be-shown./</guid>
      <description>I&amp;rsquo;ve been upgrading a local report which contains multiple subreports, and yes I got that &amp;ldquo;SubReport could not be shown.&amp;rdquo; error more than once.
Debugging this error is a pain in the a.. All you get is &amp;ldquo;SubReport could not be shown.&amp;quot;, making me want to punch my screen and scream &amp;ldquo;BUT WHY?&amp;ldquo;Just before breaking my screen and going on full tilt, I decided to take a step back and run through my checklist.</description>
    </item>
    
    <item>
      <title>Three common mistakes you should avoid when starting with Web Page Resources in ASP.NET</title>
      <link>http://localhost:1313/2009/09/three-common-mistakes-you-should-avoid-when-starting-with-web-page-resources-in-asp.net/</link>
      <pubDate>Tue, 08 Sep 2009 20:04:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2009/09/three-common-mistakes-you-should-avoid-when-starting-with-web-page-resources-in-asp.net/</guid>
      <description>This is a list of of three common mistakes made by developers who start using Web Page Resources in ASP.NET.
1. Not using the right format for the name of a local resources fileThe format of the name of a local resources file should be: PageName.PageExtension.resx.
If you don&amp;rsquo;t add the page extension (Aspx, Ascx), you will get the Exception &amp;ldquo;The resource object with key &amp;lsquo;PageTitle&amp;rsquo; was not found.&amp;quot;.
2. Not adding an App_LocalResources folder to each subfolderEach subfolder must have it&amp;rsquo;s own App_LocalResources folder, else ASP.</description>
    </item>
    
    <item>
      <title>Interview with Curt Christianson (Part II)</title>
      <link>http://localhost:1313/2009/01/interview-with-curt-christianson-part-ii/</link>
      <pubDate>Mon, 12 Jan 2009 20:34:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/01/interview-with-curt-christianson-part-ii/</guid>
      <description>This is part II of the interview with Curt Christianson. For Part I go here.
Part 2: Technology Let me ask you some general questions about building a web application. What is your advise on setting up the layers of a web application. In the web application I&amp;rsquo;m currently working on we chose a not so standard architecture I guess. We have multiple &amp;ldquo;modules&amp;rdquo;, which are folders in practice. In the root of these modules we hold our aspx pages.</description>
    </item>
    
    <item>
      <title>Interview with Curt Christianson (Part I)</title>
      <link>http://localhost:1313/2009/01/interview-with-curt-christianson-part-i/</link>
      <pubDate>Thu, 08 Jan 2009 19:42:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2009/01/interview-with-curt-christianson-part-i/</guid>
      <description>Curt Christianson is one of the administrators of forums.asp.net. Last month I stumbled across his blog, and felt like I had to do an interview with him. And here we are!
I have divided his interview in two parts:
 His career and his life Some techtalk on mainly ASP.NET webproject-architecture mixed with a bit of AJAX and WPF  Part 1: Career and life Who are you? Where do you live?</description>
    </item>
    
  </channel>
</rss>