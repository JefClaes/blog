<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on Jef Claes</title>
    <link>http://localhost:1313/tags/code/</link>
    <description>Recent content in code on Jef Claes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Jul 2017 14:34:00 +0200</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fast projections</title>
      <link>http://localhost:1313/2017/07/fast-projections.html</link>
      <pubDate>Sun, 30 Jul 2017 14:34:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2017/07/fast-projections.html</guid>
      <description>Most EventStore client libraries allow you to subscribe to a stream by passing in a callback which is invoked when an event occurs (either a live or historic event).
type Envelope = { Id : Int64 Event : Event Historic : bool } type EventOccurred = Envelope -&amp;gt; unit Let&amp;rsquo;s say we subscribe to a stream of a popular video service, and we want to project a read model that shows how many videos a viewer has watched.</description>
    </item>
    
    <item>
      <title>Commands and events with JustSaying and AWS</title>
      <link>http://localhost:1313/2016/09/commands-and-events-with-justsaying-and.html</link>
      <pubDate>Sun, 18 Sep 2016 20:52:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/09/commands-and-events-with-justsaying-and.html</guid>
      <description>I&amp;rsquo;ve been looking into handing a bit of our messaging infrastructure over to a managed alternative. Managing your own messaging infrastructure that should be highly available is not always an investment you want to make in this day and age. Going through the documentation and relying on experiences from some people I trust, I ended up looking at AWS and SNS/SQS.
Making the Github repository rounds, looking for inspiration, I stumbled on JustSaying: a library by the people from JustEat implementing a message bus on top of AWS.</description>
    </item>
    
    <item>
      <title>Using a batch layer for fast(er) aggregations </title>
      <link>http://localhost:1313/2016/04/using-batch-layer-for-faster.html</link>
      <pubDate>Sun, 24 Apr 2016 22:43:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/04/using-batch-layer-for-faster.html</guid>
      <description>In the oldest system I&amp;rsquo;m maintaining right now, we have an account aggregate that, next to mutating various balances, produces immutable financial transactions. These transactions are persisted together with the aggregate itself to a relational database. The transactions can be queried by the owner of the account in an immediate consistent fashion.
The table with these transactions looks similar to this:
CREATE TABLE [dbo].[Transaction] ( [Id] [int] IDENTITY(1,1) NOT NULL, [Timestamp] [datetime] NULL, [AccountId] [int] NOT NULL, [TransactionType] [varchar](25) NOT NULL, [CashAmount] [decimal](19, 2) NOT NULL, [BonusAmount] [decimal](19, 2) NOT NULL, [.</description>
    </item>
    
    <item>
      <title>Notifications from an event log</title>
      <link>http://localhost:1313/2016/04/notifications-from-event-log.html</link>
      <pubDate>Sun, 17 Apr 2016 17:37:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/04/notifications-from-event-log.html</guid>
      <description>User notifications are a feature that came as an afterthought, but turned out to be rather easy to implement - without touching (read: breaking) existing functionality - thanks to having an immutable event log.
In the domain I&amp;rsquo;m working in at the moment, we will often give users incentives to return to the website, or to extend their stay on the website. These incentives were only communicated by email at first, and this is a decent medium when you want users to return to the website.</description>
    </item>
    
    <item>
      <title>Functional one-liner for running totals in C#</title>
      <link>http://localhost:1313/2016/03/functional-one-liner-for-running-totals.html</link>
      <pubDate>Mon, 28 Mar 2016 16:22:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2016/03/functional-one-liner-for-running-totals.html</guid>
      <description>Visualizing some data earlier this week I had to compute the running total of a sequence of numbers.
For example, if the input sequence was [ 100; 50; 25 ] the result of the computation would be a new sequence of [ 100; 150; 175 ].
Muscle memory made me take a procedural approach, which works, but made me wonder if I could get away with less lines of code and without mutable state.</description>
    </item>
    
    <item>
      <title>Visualizing event streams</title>
      <link>http://localhost:1313/2015/12/visualizing-event-streams.html</link>
      <pubDate>Sun, 20 Dec 2015 17:59:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2015/12/visualizing-event-streams.html</guid>
      <description>In my recent talk on Evil by Design, I showed how I&amp;rsquo;ve been visualizing event streams as a means to get a better grip on how aggregates behave in production. The talk&amp;rsquo;s scope kept me from showing the code that goes together with the examples shown. Consider this post as an addendum to that talk.
First off, we need a few types: a string that identifies a stream, an event containing a timestamp and its name.</description>
    </item>
    
    <item>
      <title>Bulk SQL projections with F# and type providers</title>
      <link>http://localhost:1313/2015/10/bulk-sql-projections-with-f-and-type.html</link>
      <pubDate>Sun, 18 Oct 2015 15:30:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2015/10/bulk-sql-projections-with-f-and-type.html</guid>
      <description>Early Summer, I had to set up an integration with an external partner. They required of us to daily provide them with a relational dataset stored in SQL Server. Most, if not all of the data was temporal, append-only by nature; think logins, financial transactions..
Since the data required largely lived in an eventstore on our end, I needed fast bulk projections. Having experimented with a few approaches, I eventually settled on projections in F# taking advantage of type providers.</description>
    </item>
    
    <item>
      <title>Aspect ratio calculation</title>
      <link>http://localhost:1313/2015/09/aspect-ratio-calculation.html</link>
      <pubDate>Fri, 11 Sep 2015 23:40:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2015/09/aspect-ratio-calculation.html</guid>
      <description>Earlier today I was writing a migration script in F# where I had to calculate the aspect ratio based on the given screen dimensions. This is one of those problems where I don&amp;rsquo;t even mind breaking my head over, but directly head over to Stackoverflow to find an accepted answer which I can just copy paste. Since I didn&amp;rsquo;t find an F# snippet I could use, I ported some JavaScript, and embedded the result below for future snippet hunters.</description>
    </item>
    
    <item>
      <title>Basic casino math</title>
      <link>http://localhost:1313/2015/06/basic-casino-math.html</link>
      <pubDate>Mon, 22 Jun 2015 22:52:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2015/06/basic-casino-math.html</guid>
      <description>In a previous series of posts, I went over the models used by casinos to spin a wheel (spinning, manipulating the odds, clustering and near misses). I did not yet expand on the basic mathematical models that ensure a casino makes money.
Let&amp;rsquo;s pretend we are spinning the wheel again. The wheel has 5 pockets, and just one of those is the winning one. Given we will be using an unmodified wheel, you win 1 out of 5 spins.</description>
    </item>
    
    <item>
      <title>Consumed: Queries and projections (F#)</title>
      <link>http://localhost:1313/consumed-queries-and-projections-f.html</link>
      <pubDate>Sun, 24 May 2015 18:00:00 +0200</pubDate>
      
      <guid>http://localhost:1313/consumed-queries-and-projections-f.html</guid>
      <description>This is the third post in my series on porting a node.js application to an F# application.
So far, I&amp;rsquo;ve looked at parsing command line arguments, handling commands and storing events. Today, I want to project those events into something useful that can be formatted and printed to the console.
In the original application, I only had a single query. The result of this query lists all items consumed grouped by category, sorted chronologically.</description>
    </item>
    
    <item>
      <title>Consumed: Handling commands (F#)</title>
      <link>http://localhost:1313/2015/05/consumed-handling-commands-f.html</link>
      <pubDate>Sun, 17 May 2015 17:51:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2015/05/consumed-handling-commands-f.html</guid>
      <description>As I wrote earlier, I&amp;rsquo;ve been working on porting a node.js web application to an F# console application. It&amp;rsquo;s an application I wrote to learn node.js but still use today to keep track of all the things I consume.
The application is able to consume an item, to remove a consumed item and to query all consumed items.
In the previous post, I parsed command line arguments into typed commands and queries.</description>
    </item>
    
    <item>
      <title>Finding unused code (F#)</title>
      <link>http://localhost:1313/2015/04/finding-unused-code-f.html</link>
      <pubDate>Sun, 26 Apr 2015 18:06:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2015/04/finding-unused-code-f.html</guid>
      <description>Coming from C#, I&amp;rsquo;m used to the compiler warning me about unused variables. Relying on the compiler to help me with checked exceptions in F#, I noticed that unused values (and functions) would go unnoticed. Having accidentally read earlier that Haskell has a compiler flag to check for unused bindings, I looked for the F# equivalent but failed to find it, until Scott Wlaschin pointed me in the right direction.</description>
    </item>
    
    <item>
      <title>Consumed: Parsing command line arguments (F#)</title>
      <link>http://localhost:1313/2015/04/parsing-command-line-arguments-with-f.html</link>
      <pubDate>Sun, 19 Apr 2015 16:54:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2015/04/parsing-command-line-arguments-with-f.html</guid>
      <description>Last year, I set out to write my first node.js application; a small web application for keeping lists of everything I consume. I had something working pretty quickly, deployed it to Heroku and still find myself using it today. Since there&amp;rsquo;s very little use for having it running on a server, and because I wanted something to toy with getting better at F#, I decided to port it to an F# console application.</description>
    </item>
    
    <item>
      <title>Checked errors in F#</title>
      <link>http://localhost:1313/2015/03/checked-errors-in-f.html</link>
      <pubDate>Sun, 29 Mar 2015 17:19:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2015/03/checked-errors-in-f.html</guid>
      <description>In the land of C#, exceptions are king. By definition exceptions help us deal with &amp;ldquo;unexpected or exceptional situations that arise while a program is running&amp;rdquo;. In that regard, we&amp;rsquo;re often optimistic, overoptimistic. Most code bases treat errors as exceptional while they&amp;rsquo;re often commonplace. We are so confident about the likelyhood of things going wrong, we don&amp;rsquo;t even feel the need to communicate to consumers what might go wrong. If a consumer of a method wants to know what exceptions might be thrown, he needs to resort to reading the documentation (or source) and hope it&amp;rsquo;s up-to-date.</description>
    </item>
    
    <item>
      <title>Scaling promotion codes</title>
      <link>http://localhost:1313/2015/03/scaling-promotion-codes/</link>
      <pubDate>Sun, 15 Mar 2015 18:01:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2015/03/scaling-promotion-codes/</guid>
      <description>In our system a backoffice user can issue a promotion code for users to redeem. Redeeming a promotion code, a user receives a discount on his next purchase or a free gift. A promotion code is only active for a limited amount of time, can only be redeemed a limited amount of times and can only be redeemed once per user.
public bool TryRedeem(UserId userId) { if (HasAlreadyBeenRedeemedByUser(userId)) return false; if (NoLongerActive()) return false; if (Depleted()) return false; Apply(new PromotionCodeRedeemed(userId.</description>
    </item>
    
    <item>
      <title>Domain Language: The Playthrough Bonus</title>
      <link>http://localhost:1313/2015/02/domain-language-playthrough-bonus.html</link>
      <pubDate>Mon, 23 Feb 2015 19:05:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2015/02/domain-language-playthrough-bonus.html</guid>
      <description>Since online gambling has been regulated in Belgium, basically each eligible license holder has complemented their land based operations with an online counterpart. Being such a small country, everyone wants to secure their market share as soon as possible. The big players have been pouring tons of money in to marketing and advertising, it&amp;rsquo;s everywhere: radio, television, (online) newspapers, bus stops, billboards, sport events, airplane vouchers - you name it. While regulations for land based casinos are very strict and almost overprotective, regulations for online play are much more permissive.</description>
    </item>
    
    <item>
      <title>Averages are not good enough (F#)</title>
      <link>http://localhost:1313/2015/01/averages-are-not-good-enough-f.html</link>
      <pubDate>Sun, 18 Jan 2015 18:40:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2015/01/averages-are-not-good-enough-f.html</guid>
      <description>Let&amp;rsquo;s (no pun intended) look at a set of response times of a web service.
let responseTimes = [ 18.0; 21.0; 41.0; 42.0; 48.0; 50.0; 55.0; 90.0; ] People like having a single number to summarize a piece of data. The average is the most popular candidate. The average is calculated by dividing the sum of the input elements by the number of input elements.
let average input = let length = input |&amp;gt; Seq.</description>
    </item>
    
    <item>
      <title>Spinning the wheel: clustering and near misses</title>
      <link>http://localhost:1313/2014/12/spinning-wheel-clustering-and-near.html</link>
      <pubDate>Sun, 14 Dec 2014 17:13:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2014/12/spinning-wheel-clustering-and-near.html</guid>
      <description>The previous post showed a simple model casinos use to manipulate the odds. Instead of relying on the physical wheel for randomness, they rely on a virtual list of indexes that maps to the physical wheel.
Using that same model, it&amp;rsquo;s easy to fiddle with the virtual indexes so that they map to misses right next to the winning pocket, creating &amp;ldquo;near misses&amp;rdquo;. &amp;ldquo;Near misses&amp;rdquo; make players feel less like losing, since you &amp;ldquo;almost won&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Spinning the wheel: manipulating the odds</title>
      <link>http://localhost:1313/2014/12/spinning-wheel-manipulating-odds.html</link>
      <pubDate>Thu, 11 Dec 2014 19:24:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2014/12/spinning-wheel-manipulating-odds.html</guid>
      <description>The previous post defined a basic set of data structures and functions to spin a wheel of fortune in F#.
There was very little mystery to that implementation though. The physical wheel had four pockets and spinning the wheel would land you a win one out of four spins. As a casino, it&amp;rsquo;s impossible to come up with an interesting payout using this model.
To juice up the pot, casinos started adding more pockets to the wheel of fortune.</description>
    </item>
    
    <item>
      <title>Spinning the wheel</title>
      <link>http://localhost:1313/2014/12/spinning-wheel.html</link>
      <pubDate>Tue, 09 Dec 2014 19:56:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2014/12/spinning-wheel.html</guid>
      <description>In this post, I&amp;rsquo;ll define a basic set of data structures and functions to spin a wheel of fortune. In the next post, I&amp;rsquo;ll show you the simple model casinos use to build a bigger, more attractive pot, without touching the physical wheel and without losing money. Finally, I&amp;rsquo;ll show you how casinos tweak that model to bend the odds and create near misses.

Let&amp;rsquo;s say we have a physical wheel with four pockets, which are labeled either miss or win.</description>
    </item>
    
    <item>
      <title>Hot aggregate detection using F#</title>
      <link>http://localhost:1313/2014/11/hot-aggregate-detection-using-f.html</link>
      <pubDate>Sun, 16 Nov 2014 17:20:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2014/11/hot-aggregate-detection-using-f.html</guid>
      <description>Last week, I wrote about splitting a hot aggregate. Discovering that specific hot aggregate was easy; it would cause transactional failures from time to time.
Long-lived hot aggregates often are an indication of a missing concept and an opportunity for teasing things apart. Last week, I took one long-lived hot aggregate and pulled smaller short-lived hot aggregates out, identifying two missing concepts.
Hunting for more hot aggregates, I could visualize event streams and use my eyes to detect bursts of activity, or I could have a little function analyze the event streams for me.</description>
    </item>
    
    <item>
      <title>Programmatically force create a new LocalDB database</title>
      <link>http://localhost:1313/2014/10/programmatically-force-create-new.html</link>
      <pubDate>Sun, 26 Oct 2014 16:59:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2014/10/programmatically-force-create-new.html</guid>
      <description>I have spent the last week working in an integration test suite that seemed to be taking ages to run its first test. I ran a profiler on the setup, and noticed a few things that were cheap to improve. The first one was how a new LocalDB database was being created.
An empty database file was included into the project. When running the setup, this file would replace the existing test database.</description>
    </item>
    
    <item>
      <title>Print out the maximum depth of recursion allowed</title>
      <link>http://localhost:1313/2014/10/print-out-maximum-depth-of-recursion.html</link>
      <pubDate>Sun, 19 Oct 2014 17:33:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2014/10/print-out-maximum-depth-of-recursion.html</guid>
      <description>Karl Seguin tweeted the following earlier this week: &amp;ldquo;An interview question I sometimes ask: Write code that prints out the maximum depth of recursion allowed.&amp;rdquo;
This question is interesting for a couple of reasons. First, it&amp;rsquo;s a shorter FizzBuzz; can the candidate open an IDE, write a few lines of code, compile and run them? And second, does he know what recursion is?
Now let&amp;rsquo;s say, the interviewee knows how to write code and is familiar with the concept of recursion.</description>
    </item>
    
    <item>
      <title>Read an Event Store stream as a sequence of slices using F#</title>
      <link>http://localhost:1313/2014/10/read-event-store-stream-as-sequence-of.html</link>
      <pubDate>Sun, 05 Oct 2014 15:21:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2014/10/read-event-store-stream-as-sequence-of.html</guid>
      <description>I&amp;rsquo;m slowly working on some ideas I&amp;rsquo;ve been playing around with whole Summer. Since that&amp;rsquo;s taking me to unknown territory, I guess I&amp;rsquo;ll be putting out more technical bits here in the next few weeks.
Using the Event Store, I tried to read all events of a specific event type. This stream turned out to be a tad too large to be sent over the wire in one piece, leading to a PackageFramingException: Package size is out of bounds.</description>
    </item>
    
    <item>
      <title>Glueing the browser and POS devices together </title>
      <link>http://localhost:1313/2014/05/glueing-browser-and-pos-devices-together.html</link>
      <pubDate>Sun, 04 May 2014 18:23:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2014/05/glueing-browser-and-pos-devices-together.html</guid>
      <description>I have been occupied building a modest Point of Sale system over these last few weeks. Looking at implementing the client, there were two constraints; it needed to run on Windows and it should be able to talk to devices such as a ticket printer and a card reader.
Although we could use any Windows client framework, we like building things in the browser better for a number of reasons; platform-independence, familiar user experience, JavaScript&amp;rsquo;s asynchronous programming model and its incredible rich ecosystem.</description>
    </item>
    
    <item>
      <title>Rebinding a knockout view model</title>
      <link>http://localhost:1313/2014/04/rebinding-knockout-viewmodel.html</link>
      <pubDate>Sun, 06 Apr 2014 18:43:00 +0200</pubDate>
      
      <guid>http://localhost:1313/2014/04/rebinding-knockout-viewmodel.html</guid>
      <description>As you might have noticed reading my last two posts, I have been doing a bit of front-end work using knockout.js. Here is something that had me scratching my head for a little while..
In one of our pages we&amp;rsquo;re subscribing to a specific event. As soon as that event arrives, we need to reinitialize the model that is bound to our container element. Going through snippets earlier, I remembered seeing the cleanNode function being used a few times - which I thought would remove all knockout data and event handlers from an element.</description>
    </item>
    
    <item>
      <title>Sending commands from a knockout.js view model</title>
      <link>http://localhost:1313/2014/03/sending-commands-from-knockoutjs-view.html</link>
      <pubDate>Sun, 23 Mar 2014 18:31:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2014/03/sending-commands-from-knockoutjs-view.html</guid>
      <description>While I got to use angular.js for a good while last year, I found myself returning to knockout.js for the current application I&amp;rsquo;m working on. Where angular.js is a heavy, intrusive, opinionated, but also very complete framework, knockout.js is a small and lightweight library giving you not much more than a dynamic model binder. So instead of blindly following the angular-way, I&amp;rsquo;ll have to introduce my own set of abstractions and plumbing again; I assume that I&amp;rsquo;ll end up with a lot less.</description>
    </item>
    
    <item>
      <title>Building a live dashboard with some knockout</title>
      <link>http://localhost:1313/2014/03/building-live-dashboard-with-some.html</link>
      <pubDate>Sun, 16 Mar 2014 21:23:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2014/03/building-live-dashboard-with-some.html</guid>
      <description>Last week, we added a dashboard to our back office application that shows some actionable data about what&amp;rsquo;s going on in our system. Although we have infrastructure in place to push changes to the browser, it seemed more reasonable to have the browser fetch fresh data every few minutes.
We split the dashboard up in a few functional cohesive widgets. On the server, we built a view-optimized read model for each widget.</description>
    </item>
    
    <item>
      <title>Alternatives to Udi&#39;s domain events</title>
      <link>http://localhost:1313/2014/03/alternatives-to-udis-domain-events.html</link>
      <pubDate>Sun, 02 Mar 2014 18:21:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2014/03/alternatives-to-udis-domain-events.html</guid>
      <description>Almost four years ago Udi Dahan introduced an elegant technique that allows you to have your domain model dispatch events without injecting a dispatcher into the model - keeping your model focused on the business at hand.
This works by having a static DomainEvents class which dispatches raised events.
This customer aggregate raises an event when a customer moves to a new address.
public class Customer { private readonly string _id; private Address _address; private Name _name; public Customer(string id, Name name, Address address) { Guard.</description>
    </item>
    
    <item>
      <title>Reading an EventStore stream using JavaScript</title>
      <link>http://localhost:1313/2014/02/reading-an-eventstore-stream-using-javascript/</link>
      <pubDate>Sun, 09 Feb 2014 18:07:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2014/02/reading-an-eventstore-stream-using-javascript/</guid>
      <description>Over Christmas break, I set out three days to play with the EventStore. One of the things I wanted to do was visualize the timeline of a stream in the browser. Since the EventStore exposes its event streams over atom in JSON, I could directly consume them from JavaScript.
An event stream can contain quite a few events. Since caching parts of that stream benefits all components in the system, the atom feed is split in multiple pages - where all full pages are cacheable.</description>
    </item>
    
    <item>
      <title>Command and event semantics</title>
      <link>http://localhost:1313/2014/01/command-and-event-semantics.html</link>
      <pubDate>Sun, 05 Jan 2014 18:12:00 +0100</pubDate>
      
      <guid>http://localhost:1313/2014/01/command-and-event-semantics.html</guid>
      <description>Yesterday, I read this blog post by Michael Feathers. In the post he goes over a pain point he has often found himself struggling with while breaking down a large method; conditional statements. if (alarmEnabled) { var alarm = new Alarm(); ... alarm.Sound(); } Should we extract the if and the associated block into a new method, or just the content of the block? Is the condition too important to hide in a method?</description>
    </item>
    
  </channel>
</rss>